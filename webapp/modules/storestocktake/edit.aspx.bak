<%@ Page Language="C#" Theme="Corporate" Inherits="PageBase" Culture="auto" meta:resourcekey="PageResource1"
    UICulture="auto" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Anacle.DataFramework" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Reflection" %>
<%@ Reference Control="BinItems.ascx" %>
<%@ Import Namespace="LogicLayer" %>

<script runat="server">
    

    protected override void OnLoad(EventArgs e)
    {
        base.OnLoad(e);

    }

    protected override void OnPreRender(EventArgs e)
    {
        base.OnPreRender(e);
        OStoreStockTake StoreStockTake = (OStoreStockTake)panel.SessionObject;
        if (objectBase.CurrentObjectState != "Draft" && objectBase.CurrentObjectState != "Start")
        {
            StoreID.Enabled = false;
            StoreBinList.Enabled = false;
        }
        
        this.tabViewAdjustmentItems.Visible = objectBase.CurrentObjectState == "Close" || objectBase.CurrentObjectState == "PendingAdjustment";
        if (objectBase.CurrentObjectState == "Close" || objectBase.CurrentObjectState == "PendingAdjustment")
        {
            gridAdjustmentItems.Bind(StoreStockTake.GetStoreStockTakeItemsNeedingAdjustment());
        }

        if (StoreStockTake.CurrentActivity != null)
        {
            gridCatalogue.Visible = StoreStockTake.CurrentActivity.ObjectName == "InProgress" || StoreStockTake.CurrentActivity.ObjectName == "Close";
        }
        
        labelAdjustmentNumber.Visible = StoreStockTake.StoreAdjustID != null;
        
        if(StoreStockTake.StoreAdjustID!=null)
            objectBase.WorkflowActionRadioList.Items.Remove(objectBase.WorkflowActionRadioList.Items.FindByValue("ReturnToInProgress"));
    }
    
    public List<OStoreStockTakeBinItem> GetItems()
    {
        List<OStoreStockTakeBinItem> list = new List<OStoreStockTakeBinItem>();
        foreach (GridViewRow row in gridCatalogue.Grid.Rows)
        {
            if (row.RowType == DataControlRowType.DataRow)
            {
                OStoreStockTakeBinItem item = TablesLogic.tStoreStockTakeBinItem.Create();
                item.StoreBinItemID = new Guid(((HiddenField)row.Cells[7].FindControl("hidObjectID")).Value);
                item.ObservedQuantity = Convert.ToDecimal(((TextBox)row.Cells[7].FindControl("txtActualqty")).Text);
                list.Add(item);
            }
        }
        return list;
    }

    protected void BindData(Guid storeID)
    {
        StoreBinList.Bind(TablesLogic.tStoreBin[TablesLogic.tStoreBin.StoreID == storeID], "ObjectName", "ObjectID");
    }



    protected void panel_PopulateForm(object sender, EventArgs e)
    {
        if (Request["AdjustCreated"] == "1" & !IsPostBack)
        {
            tabObject.SelectedIndex = 1;
            panel.Message = "Stocktake adjusted.";
        }

        OStoreStockTake StoreStockTake = (OStoreStockTake)panel.SessionObject;
        panel.ObjectPanel.BindObjectToControls(StoreStockTake);

        StoreID.Bind(OStore.FindAccessibleStores(AppSession.User, Security.Decrypt(Request["TYPE"]), StoreStockTake.StoreID), true);
        StoreBinList.Bind(TablesLogic.tStoreBin[TablesLogic.tStoreBin.StoreID == StoreStockTake.StoreID], "ObjectName", "ObjectID");

        if (StoreStockTake.StoreAdjustID != null)
        {
            buttonEditStoreAdjustment.Visible = AppSession.User.AllowEditAll("OStoreAdjust") || OActivity.CheckAssignment(AppSession.User, StoreStockTake.StoreAdjustID);
            buttonViewStoreAdjustment.Visible = AppSession.User.AllowViewAll("OStoreAdjust");
        }

        panel.ObjectPanel.BindObjectToControls(StoreStockTake);
    }


    protected void gridCatalogue_RowDataBound(Object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (objectBase.CurrentObjectState == "Close")
            {
                UIFieldTextBox text = (UIFieldTextBox)e.Row.Cells[6].FindControl("ObservedQuantity");
                
                if(text != null)
                    text.Enabled = false;
            }             
        }
    }
    protected void printStoreStockTakeform_Click(object sender, EventArgs e)
    {
        try
        {
            if (panel.CurrentObject.IsNew)
            {
                panel.Message = Resources.Errors.General_CannotPrintNewObject;
                return;
            }

            OStoreStockTake StoreStockTake = (OStoreStockTake)panel.SessionObject;
            panel.FocusWindow = false;
            panel.ObjectPanel.BindControlsToObject(StoreStockTake);

            DiskCache .Add("ReportTable", StoreStockTake.GetStockTakeFormData());

            Window.Open(Page.Request.ApplicationPath +
                "/modules/reportviewer/reportviewer.aspx?OutputType=EXCEL&ReportDataSetName=" +
                HttpUtility.UrlEncode(Security.Encrypt("StoreStockTake")) + "&ReportVirtualPath=" + HttpUtility.UrlEncode(Security.Encrypt("~/modules/storestocktake/stocktake.rdl")), "StoreStockTake_Window");

            Window.Opener.Refresh();
            
        }
        catch (System.Data.Odbc.OdbcException ex)
        {
            panel.Message = Resources.Errors.General_OdbcException;
        }
        catch (Exception ex)
        {
            panel.Message = ex.Message;
        }
    }

    protected void btnCreateStoreAdjustment_Click(object sender, EventArgs e)
    {
        OStoreStockTake StoreStockTake = (OStoreStockTake)panel.SessionObject;
        panel.ObjectPanel.BindControlsToObject(StoreStockTake);

        List<OStoreStockTakeBinItem> adjustItems = StoreStockTake.GetStoreStockTakeItemsNeedingAdjustment();
        if (adjustItems.Count <= 0)
        {
            panel.Message = gridAdjustmentItems.ErrorMessage = Resources.Errors.StockTake_NoItemsToAdjust;
            return;
        }

        OStoreAdjust adjust = StoreStockTake.CreateStoreAdjustment();

        if (AppSession.User.AllowEditAll("OStoreAdjust") || OActivity.CheckAssignment(AppSession.User, adjust.ObjectID))
            Window.OpenEditObjectPage(this, "OStoreAdjust", adjust.ObjectID.ToString(), "AdjustCreated=1");
    }

    protected void Page_PreRender(object sender, EventArgs e)
    {
        OStoreStockTake StoreStockTake = (OStoreStockTake)panel.SessionObject;
        panel.ObjectPanel.BindControlsToObject(StoreStockTake);

        btnCreateStoreAdjustment.Visible = StoreStockTake.StoreAdjustID == null;
        btnCreateStoreAdjustment.Enabled = (objectBase.CurrentObjectState != "Close");
        labelAdjustmentNumber.Visible = StoreStockTake.StoreAdjustID != null;
    }

    protected void gridCatalogue_PreRender(object sender, EventArgs e)
    {
        foreach (GridViewRow row in gridCatalogue.Grid.Rows)
        {
            UIFieldTextBox tbObservedQuantity = row.FindControl("ObservedQuantity") as UIFieldTextBox;

            if (tbObservedQuantity != null)
            {
                if (tbObservedQuantity.Text !="")
                    tbObservedQuantity.Text = Convert.ToDecimal(tbObservedQuantity.Text).ToString("#,##0");
            }
        }
    }

    protected void StoreID_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (StoreID.Control.SelectedValue != "")
            StoreBinList.Bind(TablesLogic.tStoreBin[TablesLogic.tStoreBin.StoreID == new Guid(StoreID.Control.SelectedValue)]);
    }

    protected void StoreBinList_ControlChange(object sender, EventArgs e)
    {
        gridCatalogue.Visible = false;
        panel.Message = "";
    }

    
    /// <summary>
    /// Validates and saves the object.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void panel_ValidateAndSave(object sender, EventArgs e)
    {
        using (Connection c = new Connection())
        {
            OStoreStockTake storeStockTake = (OStoreStockTake)panel.SessionObject;
            panel.ObjectPanel.BindControlsToObject(storeStockTake);

            // Validate
            //
            if (objectBase.SelectedAction == "Start")
            {
                string lockedStoreBins = storeStockTake.ValidateStoreBinsNotLocked();
                if (lockedStoreBins != "")
                    StoreBinList.ErrorMessage = String.Format(Resources.Errors.StockTake_StoreBinsLocked, lockedStoreBins);
            }

            if (!panel.ObjectPanel.IsValid)
                return;

            storeStockTake.Save();
            c.Commit();
        }
    }

    
    /// <summary>
    /// Occurs when the user clicks on the edit adjustment button.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void buttonEditStoreAdjustment_Click(object sender, EventArgs e)
    {
        OStoreStockTake storeStockTake = (OStoreStockTake)panel.SessionObject;

        if (AppSession.User.AllowEditAll("OStoreAdjust") || OActivity.CheckAssignment(AppSession.User, storeStockTake.StoreAdjustID))
            Window.OpenEditObjectPage(this, "OStoreAdjust", storeStockTake.StoreAdjustID.ToString(), "");
        else
            panel.Message = Resources.Errors.General_CannotEditWorkBecauseNotAssignedToYou;
    }


    /// <summary>
    /// Occurs when the user clicks on the view adjustment button.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void buttonViewStoreAdjustment_Click(object sender, EventArgs e)
    {
        OStoreStockTake storeStockTake = (OStoreStockTake)panel.SessionObject;
        
        Window.OpenViewObjectPage(this, "OStoreAdjust", storeStockTake.StoreAdjustID.ToString(), "");
    }
</script>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Simplism.EAM</title>
    <link href="../../App_Themes/Corporate/StyleSheet.css" rel="stylesheet" Anacle.EAM</title>
    <link href="../../App_Themes/Corporate/StyleSheet.css" rel="stylesheet" type="text/css" />
</head>
<body>
    <form id="form1" runat="server">
        <ui:UIObjectPanel runat="server" ID="panelMain">
        <web:object runat="server" ID="panel" Caption="Store Take" BaseTable="tStoreStockTake"
            ObjectPanelID="tabObject" meta:resourcekey="panelResource1" OnPopulateForm="panel_PopulateForm"
             AutomaticBindingAndSaving="true" OnValidateAndSave="panel_ValidateAndSave"></web:object>
        <div class="div-main">
            <table width="100%" bgcolor ="#cccccc">
                <tr>
                    <td align="right">
                        <ui:UIButton runat="server" ID="printStoreStockTakeform" Text="Print Stock Take Form"
                            ImageUrl="../../images/printer.gif" OnClick="printStoreStockTakeform_Click" meta:resourcekey="printStoreStockTakeformResource1" />
                    </td>
                </tr>
            </table>
            <ui:UITabStrip runat="server" ID="tabObject" meta:resourcekey="tabObjectResource1">
                <ui:UITabView runat="server" ID="uitabview1" Caption="Details" CssClass="div-form"
                    meta:resourcekey="uitabview1Resource1" IsModifiedByAjax="False">
                    <web:base runat="server" ID="objectBase" ObjectNameVisible="false" ObjectNumberCaption="Stock Take Number"
                        ObjectNumberEnabled="false" ObjectNumberVisible="true" meta:resourcekey="objectBaseResource1">
                    </web:base>
                    <ui:UIFieldDropDownList runat="server" ID="StoreID" Caption="Store" ValidateRequiredField="True" PropertyName="StoreID"
                        Style="float: left; table-layout: fixed;" AjaxPostBack="False" border="0" CaptionWidth="120px"
                        cellpadding="2" cellspacing="0" Height="20px"
                        Width="99%" OnSelectedIndexChanged="StoreID_SelectedIndexChanged" />
                    <ui:UIFieldListBox runat="server" ID="StoreBinList" ValidateRequiredField="True" 
                    PropertyName="StoreBins" Caption="Bin" 
                    style="float:left;table-layout:fixed;" AjaxPostBack="False" CaptionWidth="120px" 
                    OnControlChange="StoreBinList_ControlChange" />
                    <br />
                    <ui:UIFieldLabel runat="server" ID="lblStoreTakeStartDate" Caption="Stock Take Start Date"
                        PropertyName="StoreStockTakeStartDateTime" Style="float: left; table-layout: fixed;" DataFormatString="{0:dd-MMM-yyyy HH:mm:ss}"
                        AjaxPostBack="False" border="0" CaptionWidth="120px" cellpadding="2" cellspacing="0" Height="20px" IsModifiedByAjax="False" Span="Half" meta:resourcekey="lblStoreTakeStartDateResource1"
                        StringValue="" Width="99%" />
                    <ui:UIFieldLabel runat="server" ID="lblStoreTakeEndDate" Caption="Stock Take End Date"
                        PropertyName="StoreStockTakeEndDateTime" Style="float: left;
                        table-layout: fixed;" DataFormatString="{0:dd-MMM-yyyy HH:mm:ss}"
                        AjaxPostBack="False" border="0" CaptionWidth="120px" cellpadding="2"
                        cellspacing="0" Height="20px" IsModifiedByAjax="False" Span="Half"
                        meta:resourcekey="lblStoreTakeEndDateResource1" StringValue=""
                        Width="99%" />
                    <br />
                    <br />
                    <ui:UISeparator runat="server" meta:resourcekey="UISeparatorResource1" />
                    <ui:UIGridView runat="server" ID="gridCatalogue" PropertyName="StoreStockTakeBinItems"
                        OnRowDataBound="gridCatalogue_RowDataBound" Caption="Store Catalog" CheckBoxColumnVisible="False"
                        AjaxPostBack="False" CaptionWidth="120px" IsModifiedByAjax="False"
                        meta:resourcekey="gridCatalogueResource1" BindObjectsToRows="True" SortExpression="StoreBin.ObjectName, Catalogue.StockCode"
                        Width="100%" AllowPaging="True" AllowSorting="True" PagingEnabled="True" RowErrorColor="" OnPreRender="gridCatalogue_PreRender" KeepLinksToObjectListInSession="True">
                        <Columns>
                            <ui:UIGridViewBoundColumn PropertyName="StoreBin.ObjectName" HeaderText="Bin">
                            </ui:UIGridViewBoundColumn>
                            <ui:UIGridViewBoundColumn PropertyName="Catalogue.StockCode" HeaderText="Stock Code"
                               meta:resourcekey="UIGridViewBoundColumnResource3">
                                </ui:UIGridViewBoundColumn>
                            <ui:UIGridViewBoundColumn PropertyName="Catalogue.ObjectName" HeaderText="Catalog">
                            </ui:UIGridViewBoundColumn>
                            <ui:UIGridViewBoundColumn PropertyName="Catalogue.UnitOfMeasure.ObjectName" HeaderText="Unit of Measure">
                            </ui:UIGridViewBoundColumn>
                            <ui:UIGridViewBoundColumn PropertyName="PhysicalQuantity" HeaderText="Available Qty" DataFormatString="{0:#,##0}">
                            </ui:UIGridViewBoundColumn>
                            <ui:UIGridViewTemplateColumn HeaderText="Actual Qty" meta:resourcekey="UIGridViewBoundColumnResource2">
                                <ItemTemplate>
                                    <ui:UIFieldTextBox ShowCaption="false" runat="server" ID="ObservedQuantity" Caption="Actual Qty" InternalControlWidth="80px"
                                        PropertyName="ObservedQuantity" meta:resourcekey="ObservedQuantityResource1" ValidateRequiredField="True" ValidateRangeField="True" ValidationRangeMin="0" ValidationRangeMinInclusive="True" ValidationRangeType="Currency" ValidateDataTypeCheck="True" ValidationDataType="Currency" />
                                </ItemTemplate>
                            </ui:UIGridViewTemplateColumn>                          
                        </Columns>
                    </ui:UIGridView>
                </ui:UITabView>
                <ui:UITabView runat="server" ID="tabViewAdjustmentItems" Caption="Adjustment" CssClass="div-form"
                    meta:resourcekey="tabViewAdjustmentItemsResource1">
                    <ui:UIFieldLabel runat="server" ID="labelAdjustmentNumber" PropertyName="StoreAdjust.ObjectNumber" Caption="Store Adjust Number" ContextMenuAlwaysEnabled="true">
                        <ContextMenuButtons>
                            <ui:UIButton runat="server" ID="buttonViewStoreAdjustment" CausesValidation="false" OnClick="buttonViewStoreAdjustment_Click" Text="View Adjustment" ImageUrl="~/images/view.gif" AlwaysEnabled="true" />
                            <ui:UIButton runat="server" ID="buttonEditStoreAdjustment" CausesValidation="false" OnClick="buttonEditStoreAdjustment_Click" Text="Edit Adjustment" ImageUrl="~/images/edit.gif" AlwaysEnabled="true" />
                        </ContextMenuButtons>
                    </ui:UIFieldLabel>
                    <ui:UIButton runat="server" ID="btnCreateStoreAdjustment" ConfirmText="Are you sure you want to create store adjust?" Text="Create Store Adjustment"
                        ImageUrl="../../images/add.gif" OnClick="btnCreateStoreAdjustment_Click" meta:resourcekey="btnCreateStoreAdjustmentResource1" />
                    <ui:UIGridView runat="server" ID="gridAdjustmentItems" OnRowDataBound="gridCatalogue_RowDataBound"
                        Caption="Adjustment Items" CheckBoxColumnVisible="False" AjaxPostBack="False"
                        CaptionWidth="120px" IsModifiedByAjax="False" meta:resourcekey="gridCatalogueResource1"
                        BindObjectsToRows="True" SortExpression="StoreBin.ObjectName, Catalogue.StockCode" Width="100%" AllowPaging="True"
                        AllowSorting="True" PagingEnabled="True" RowErrorColor="" KeepLinksToObjectListInSession="True">
                        <Columns>
                            <ui:UIGridViewBoundColumn PropertyName="StoreBin.ObjectName" HeaderText="Bin">
                            </ui:UIGridViewBoundColumn>
                            <ui:UIGridViewBoundColumn PropertyName="Catalogue.StockCode" HeaderText="Stock Code"
                                 meta:resourcekey="UIGridViewBoundColumnResource4">
                                </ui:UIGridViewBoundColumn>
                            <ui:UIGridViewBoundColumn PropertyName="Catalogue.ObjectName" HeaderText="Catalog">
                            </ui:UIGridViewBoundColumn>
                            <ui:UIGridViewBoundColumn PropertyName="Catalogue.UnitOfMeasure.ObjectName" HeaderText="Unit of Measure"
                                meta:resourcekey="UIGridViewBoundColumnResource16">
                            </ui:UIGridViewBoundColumn>
                            <ui:UIGridViewBoundColumn PropertyName="PhysicalQuantity" HeaderText="Available Quantity" DataFormatString="{0:#,##0}">
                            </ui:UIGridViewBoundColumn>
                            <ui:UIGridViewBoundColumn PropertyName="ObservedQuantity" HeaderText="Actual Qty" DataFormatString="{0:#,##0}">
                            </ui:UIGridViewBoundColumn>
                        </Columns>
                    </ui:UIGridView>
                </ui:UITabView>
                <ui:UITabView runat="server" ID="tabMemo" Caption="Memo" CssClass="div-form" meta:resourcekey="tabMemoResource1">
                    <web:memo ID="Memo1" runat="server"></web:memo>
                </ui:UITabView>
                <ui:UITabView runat="server" ID="tabAttachments" Caption="Attachments" CssClass="div-form"
                    meta:resourcekey="uitabview2Resource1">
                    <web:attachments runat="server" ID="attachments"></web:attachments>
                </ui:UITabView>
            </ui:UITabStrip>
        </div>
        </ui:UIObjectPanel>
    </form>
</body>
</html>
