<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Anacle.DataFramework</name>
    </assembly>
    <members>
        <member name="T:Anacle.DataFramework.Expression">
            <summary>
            Represents an expression tree used in composing and generating 
            SQL queries.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Expression.DetermineJoins(System.Boolean,System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.ArrayList)">
            <summary>
            Determines the joins of a query by recursively traversing the expression graph.
            </summary>
            <param name="fromTableIsKnown"></param>
            <param name="from"></param>
            <param name="leftJoins"></param>
            <param name="renderedLeftJoins"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Anacle.DataFramework.Expression.DetermineConnectionString" -->
        <member name="M:Anacle.DataFramework.ExpressionData.Count">
            <summary>
            Constructs a SQL for the count of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.CountDistinct">
            <summary>
            Constructs a SQL for the distinct count of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.op_Equality(Anacle.DataFramework.ExpressionData,System.Object)">
            <summary>
            Constructs an <c>ExpressionCondition</c> object representing
            an equality comparison between the specified parameters.
            </summary>
            <param name="a">An <c>ExpressionData</c> object.</param>
            <param name="b">An object to compare</param>
            <returns>An <c>ExpressionCondition</c>.</returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.op_Inequality(Anacle.DataFramework.ExpressionData,System.Object)">
            <summary>
            Constructs an <c>ExpressionCondition</c> object representing
            an inequality comparison between the specified parameters.
            </summary>
            <param name="a">An <c>ExpressionData</c> object.</param>
            <param name="b">An object to compare</param>
            <returns>An <c>ExpressionCondition</c>.</returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.op_Equality(Anacle.DataFramework.ExpressionData,Anacle.DataFramework.ExpressionData)">
            <summary>
            Constructs an <c>ExpressionCondition</c> object representing
            an equality comparison between two expressions.
            </summary>
            <param name="a">An <c>ExpressionData</c> object.</param>
            <param name="b">An <c>ExpressionData</c> object.</param>
            <returns>An <c>ExpressionCondition</c>.</returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.op_Inequality(Anacle.DataFramework.ExpressionData,Anacle.DataFramework.ExpressionData)">
            <summary>
            Constructs an <c>ExpressionCondition</c> object representing
            an inequality comparison between two expressions.
            </summary>
            <param name="a">An <c>ExpressionData</c> object.</param>
            <param name="b">An <c>ExpressionData</c> object.</param>
            <returns>An <c>ExpressionCondition</c>.</returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.In(Anacle.DataFramework.ExpressionData[])">
            <summary>
            Constructs an SQL IN clause, in which contains the expressions
            specified in b.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.In(System.Collections.IEnumerable)">
            <summary>
            Constructs an SQL IN clause, in which contains the objects
            specified in the enumerable b.
            <para></para>
            The elements in the IEnumerable may contain a PersistentObject
            or any data of the following types (Guid, string, DateTime,
            decimal, int).
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.As(System.String)">
            <summary>
            Constructs an SQL to rename the column name of the
            result.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.DetermineJoins(System.Boolean,System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.ArrayList)">
            <summary>
            Determines all the joins necessary for all fields in the query to 
            successfully execute.
            </summary>
            <param name="fromTableIsKnown">A flag to indicate if the 'from' table is already known.
            When this flag is true, it means the application has executed the query by
            using <c>TablesLogic.tXXXX.Select()</c>, instead of <c>Query.Select()</c></param>
            <param name="from">A hashtable storing the from clause.</param>
            <param name="leftJoins">A hashtable indicating if the left joins have been created.</param>
            <param name="renderedLeftJoins">A list containing all left join clauses.</param>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.DetermineConnectionString">
            <summary>
            Determines the connection string by traversing every
            node in the Expression graph.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.Equals(System.Object)">
            <summary>
            This is not implemented.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.GetHashCode">
            <summary>
            This is not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionData.Render(System.Boolean)">
            <summary>
            Renders this Query into an SQL statement.
            </summary>
            <param name="renderTableName"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Anacle.DataFramework.ExpressionData.op_Implicit(System.Int32)~Anacle.DataFramework.ExpressionData" -->
        <!-- Badly formed XML comment ignored for member "M:Anacle.DataFramework.ExpressionData.op_Implicit(System.Single)~Anacle.DataFramework.ExpressionData" -->
        <!-- Badly formed XML comment ignored for member "M:Anacle.DataFramework.ExpressionData.op_Implicit(System.Double)~Anacle.DataFramework.ExpressionData" -->
        <!-- Badly formed XML comment ignored for member "M:Anacle.DataFramework.ExpressionData.op_Implicit(System.Decimal)~Anacle.DataFramework.ExpressionData" -->
        <!-- Badly formed XML comment ignored for member "M:Anacle.DataFramework.ExpressionData.op_Implicit(System.String)~Anacle.DataFramework.ExpressionData" -->
        <!-- Badly formed XML comment ignored for member "M:Anacle.DataFramework.ExpressionData.op_Implicit(System.DateTime)~Anacle.DataFramework.ExpressionData" -->
        <!-- Badly formed XML comment ignored for member "M:Anacle.DataFramework.ExpressionData.op_Implicit(System.Guid)~Anacle.DataFramework.ExpressionData" -->
        <member name="P:Anacle.DataFramework.ExpressionData.Asc">
            <summary>
            Constructs an SQL to sort this expression in
            the ascending order.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.ExpressionData.Desc">
            <summary>
            Constructs an SQL to sort this expression in
            the descending order.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.DataListBase">
            <summary>
            This class is an abstract class that implements
            the generic methods for the DataList class.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.DataList`1">
            <summary>
            This class implements a list for one-to-many and many-to-many relationships
            that can be defined in a PersistentObject.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.#ctor(Anacle.DataFramework.PersistentObject,Anacle.DataFramework.SchemaBase)">
            <summary>
            Internal constructor. This constructor should not be called by the developer.
            </summary>
            <param name="parentObject"></param>
            <param name="childSchema"></param>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.LazyLoad">
            <summary>
            Lazy load.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.Invalidate">
            <summary>
            Invalidates the list, and forces a reload of the list the
            next time this list is accessed again.
            </summary>
            <remarks>
            This method invalidates this list and clears all items within
            this list. The list will only be reloaded the next time when 
            it is accessed again by the code.
            </remarks>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.AddGuid(System.Guid)">
            <summary>
            Adds an object into the list based on the object's ObjectID.
            </summary>
            <remarks>
            The PersistentObject with the ObjectID must come from the same table
            as the table specified by the template type <c>T</c>. 
            <para></para>
            <example>
            To add a new object that has not yet been loaded into the list:
            <code>
                public void AddItem(Guid itemId)
                {
                    OWork work = TablesLogic.tWork.Load(TablesLogic.tWork.ObjectNumber=="WO000001");
                    work.Items.AddGuid(itemId);
                }
            </code>
            </example>
            </remarks>
            <param name="objectId">The ObjectID of the PersistentObject from the table <c>T</c>.</param>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.RemoveGuid(System.Guid)">
            <summary>
            Removes an object from the list based on the object's ObjectID.
            </summary>
            <remarks>
            The PersistentObject with the ObjectID must come from the same table
            as the table specified by the template type <c>T</c>. 
            <example>
            To remove an object that has not yet been loaded into the list:
            <code>
                public void RemoveItem(Guid itemId)
                {
                    OWork work = TablesLogic.tWork.Load(TablesLogic.tWork.ObjectNumber=="WO000001");
                    work.Items.RemoveGuid(itemId);
                }
            </code>
            </example>
            </remarks>
            <param name="objectId">The ObjectID of the PersistentObject from the table <c>T</c>.</param>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.Add(`0)">
            <summary>
            Adds a persistent object of the template type <c>T</c> into the list.
            </summary>
            <remarks>
            The following code shows how to clear the list and then create new objects
            and add it to a one-to-many list.
            <code>
                public partial class OWork : PersistentObject
                {
                    public string WorkDescription { get; set; }
                    public DateTime? ScheduledStartDateTime { get; set; }
                    public DateTime? ScheduledEndDateTime { get; set; }
                    public DataList&lt;OWorkCost&gt; WorkCosts { get; }
            
                    public void ClearAndAddNewCosts(Guid itemId, decimal cost)
                    {
                        // clears all costs from this work.
                        //
                        this.WorkCosts.Clear();
                        
                        // create a new WorkCost object and add it into the list
                        // 
                        OWorkCost newCost = TablesLogic.tWorkCost.Create();
                        newCost.ItemID = itemId;
                        newCost.Cost = cost;
                        this.WorkCosts.Add(newCost);
                    }
                }
            </code>
            </remarks>
            <param name="obj">The object to be added to the list.</param>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.Remove(`0)">
            <summary>
            Remove a persistent object of the template type from the list.
            </summary>
            <remarks>
            The following code shows how to find a item and remove it from the list.
            <code>
                public partial class OWork : PersistentObject
                {
                    public string WorkDescription { get; set; }
                    public DateTime? ScheduledStartDateTime { get; set; }
                    public DateTime? ScheduledEndDateTime { get; set; }
                    public DataList&lt;OWorkCost&gt; WorkCosts { get; }
            
                    public void RemoveWorkCostByObjectID(Guid objectId)
                    {
                        // Finds the object by the ID.
                        // 
                        OWorkCost workCost = this.WorkCosts.Find(objectId);
            
                        // Remove it if the work cost exists in the list.
                        //
                        if(workCost != null)
                            this.WorkCosts.Remove(workCost);
                    }
                }
            </code>
            </remarks>
            <param name="obj">The object to be removed from the list.</param>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.Find(System.Guid)">
            <summary>
            Find an object based on the ObjectID. This method will return
            the type based on the type specified template type.
            </summary>
            <remarks>
            The following code shows how to find a item and remove it from the list.
            <code>
                public partial class OWork : PersistentObject
                {
                    public string WorkDescription { get; set; }
                    public DateTime? ScheduledStartDateTime { get; set; }
                    public DateTime? ScheduledEndDateTime { get; set; }
                    public DataList&lt;OWorkCost&gt; WorkCosts { get; }
            
                    public void RemoveWorkCostByObjectID(Guid objectId)
                    {
                        // Finds the object by the ID.
                        // 
                        OWorkCost workCost = this.WorkCosts.Find(objectId);
            
                        // Remove it if the work cost exists in the list.
                        //
                        if(workCost != null)
                            this.WorkCosts.Remove(workCost);
                    }
                }
            </code>
            </remarks>
            <param name="objectId">The ObjectID of the <c>PersistentObject</c> to find.</param>
            <returns>The <c>PersistentObject</c> whose ObjectID matches the one passed in. If no PersistentObject is found, returns null.</returns>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the first occurence within the
            entire list.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all elements that match the conditions defined
            by the specified predicate.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the last occurence within the
            entire list.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element
            in the list.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.Sort(System.String,System.Boolean)">
            <summary>
            Sorts the current list based on the given property.
            Unlike the Order method, this Sort behaves like the List.Sort 
            method, which re-orders the items in the list.
            </summary>
            <param name="property"></param>
            <param name="ascending"></param>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.AddObject(Anacle.DataFramework.PersistentObject)">
            <summary>
            Add an object of the <c>PersistentObject</c> type into the list.
            <para></para>
            If the <c>PersistentObject</c> is not of the type <c>T</c>, an
            exception will be thrown.
            </summary>
            <param name="obj">The object to be added to the list.</param>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.RemoveObject(Anacle.DataFramework.PersistentObject)">
            <summary>
            Remove an object of the PersistentObject type from the list.
            <para></para>
            If the <c>PersistentObject</c> is not of the type <c>T</c>, an
            exception will be thrown.
            </summary>
            <param name="obj">The object to be removed from the list.</param>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.FindObject(System.Guid)">
            <summary>
            Find an object of the PersistentObject type based on the ObjectID.
            </summary>
            <param name="objectId">The ObjectID of the <c>PersistentObject</c> to find.</param>
            <returns>The <c>PersistentObject</c> whose ObjectID matches the one passed in. If no PersistentObject is found, returns null.</returns>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.Clear">
            <summary>
            Clear the entire list. But this does not remove any links in the database
            until the object is saved.
            </summary>
            <remarks>
            The following code shows how to clear the list and then create new objects
            and add it to a one-to-many list.
            <code>
                public partial class OWork : PersistentObject
                {
                    public string WorkDescription { get; set; }
                    public DateTime? ScheduledStartDateTime { get; set; }
                    public DateTime? ScheduledEndDateTime { get; set; }
                    public DataList&lt;OWorkCost&gt; WorkCosts { get; }
            
                    public void ClearAndAddNewCosts(Guid itemId, decimal cost)
                    {
                        // clears all costs from this work.
                        //
                        this.WorkCosts.Clear();
                        
                        // create a new WorkCost object and add it into the list
                        // 
                        OWorkCost newCost = TablesLogic.tWorkCost.Create();
                        newCost.ItemID = itemId;
                        newCost.Cost = cost;
                        this.WorkCosts.Add(newCost);
                    }
                }
            </code>
            </remarks>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.GetObjectType">
            <summary>
            Gets the <c>T</c> type of that this <c>DataList</c>.
            </summary>
            <returns>The <c>Type</c> object.</returns>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a list of <c>PersistentObject</c> of the type <c>T</c> into
            this list.
            </summary>
            <param name="col"></param>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.GetEnumerator">
            <summary>
            Returns the IEnumerator interface to this <c>DataList</c>.
            </summary>
            <returns>A reference to the IEnumerator interface.</returns>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.ClearObjectsWithErrors">
            <summary>
            Removes all objects with user-defined errors 
            (or whose objectError property is not an empty string) 
            from the list.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.DataList`1.Order(Anacle.DataFramework.ColumnOrder[])">
            --------------------------------------------------------------
            <summary>
            Sorts the current list of objects and returns it to the 
            caller. Note that this list is never sorted permanently.
            Only the resulting list returned to you is sorted.
            <para></para>
            To sort the list internally, use the Sort method.
            </summary>
            <remarks>
            To following illustrates how to order the list of objects
            in a one-to-many/many-to-many list.
            <code>
                // We have a list of WorkCost objects in a Work
                // object that we want to order by the Cost (ascending)
                // then by the Name (descending).
                //
                List&lt;OWorkCost&gt; costs = work.WorkCost.Order(
                    TablesLogic.tWorkCost.Cost.Asc,
                    TablesLogic.tWorkCost.ObjectName.Desc );
            
                foreach(OWorkCost cost in costs)
                    Console.WriteLine(cost.ObjectName + ": " + cost.Cost.Value);
            </code>
            Note that you should not specify ordering of columns
            that exist in joined tables. The behavior is not deterministic
            and may yield unexpected results.
            </remarks>
            <param name="columnOrders">Indicates the ordering to sort the objects by.</param>
            <returns>A list of <c>PersistentObjects</c> of type <c>T</c> sorted
            in the order.</returns>
            --------------------------------------------------------------
        </member>
        <member name="P:Anacle.DataFramework.DataList`1.ParentObject">
            <summary>
            Gets the instance of the parent object that 
            instantiated this list.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.DataList`1.Count">
            <summary>
            Returns the number of items in this list.
            </summary>
            <remarks>
            Using the Count property in conjunction with the array indexer is 
            an alternative to access items in the list. The following code shows
            how we can access items in a list using these two properties.
            <code>
                public partial class OWork : PersistentObject
                {
                    public string WorkDescription { get; set; }
                    public DateTime? ScheduledStartDateTime { get; set; }
                    public DateTime? ScheduledEndDateTime { get; set; }
                    public DataList&lt;OWorkCost&gt; WorkCosts { get; }
            
                    public decimal ComputeTotalCosts()
                    {
                        decimal totalCost = 0;
                        for(int i = 0; i &lt; this.WorkCosts.Count; i++)
                        {
                            totalCost += this.WorkCosts[i].Cost;
                        }
                        return totalCost;
                    }
            </code>
            </remarks>
        </member>
        <member name="P:Anacle.DataFramework.DataList`1.Item(System.Int32)">
            <summary>
            Returns the PersistentObject at the <i>index</i>-th position.
            </summary>
            <remarks>
            Using the Count property in conjunction with the array indexer is 
            an alternative to access items in the list. The following code shows
            how we can access items in a list using these two properties.
            <code>
                public partial class OWork : PersistentObject
                {
                    public string WorkDescription { get; set; }
                    public DateTime? ScheduledStartDateTime { get; set; }
                    public DateTime? ScheduledEndDateTime { get; set; }
                    public DataList&lt;OWorkCost&gt; WorkCosts { get; }
            
                    public decimal ComputeTotalCosts()
                    {
                        decimal totalCost = 0;
                        for(int i = 0; i &lt; this.WorkCosts.Count; i++)
                        {
                            totalCost += this.WorkCosts[i].Cost;
                        }
                        return totalCost;
                    }
            </code>
            </remarks>
            <param name="index">The position of the <c>PersistentObject</c> to return.</param>
            <returns>The <c>PersistentObject</c> at the <i>index</i>-th position.</returns>
        </member>
        <member name="T:Anacle.DataFramework.PersistentObjectList`1">
            <summary>
            This is used internally and should not be used by the developer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObjectList`1.Add(`0)">
            <summary>
            This is used internally.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObjectList`1.Remove(`0)">
            <summary>
            This is used internally.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObjectList`1.Clear">
            <summary>
            This is used internally.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObjectList`1.Item(System.Guid)">
            <summary>
            This is used internally.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Anacle.DataFramework.Agreement">
            <summary>
            This class is used internally.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Agreement.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Agreement.Decode(System.String)">
            <summary>
            This is used internally.
            </summary>
            <param name="licenseString">-</param>
        </member>
        <member name="M:Anacle.DataFramework.Agreement.Encode">
            <summary>
            This is used internally.
            </summary>
            <returns>-</returns>
        </member>
        <member name="P:Anacle.DataFramework.Agreement.Item(System.String)">
            <summary>
            This is used internally.
            </summary>
            <param name="index">-</param>
            <returns>-</returns>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.ObjectID">
            <summary>
            Represents the column for the primary key of this PersistentObject.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.ObjectName">
            <summary>
            Represents the column for the object name, which is usually the display name of the
            object. For example, the ObjectName for a location object would actually
            be its location name. 
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.ObjectNumber">
            <summary>
            Represents the column for the object number, which is usually a running number used
            as a reference. For example, the ObjectNumber for a contract object would
            actually be the contract running number, or for a purchase order, this would
            be the purchase order running number. 
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.IsDeleted">
            <summary>
            Represents the column for a flag to indicate if this PersistentObject 
            has been deleted (or deactivated) from the database.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.HierarchyPath">
            <summary>
            Represents the column for the HierarchyPath of this PersistentObject. The HierarchyPath is a
            concatenation of list of primary keys of all chain of parents, beginning from the
            root down to this PersistentObject.
            <para></para>
            The use of a HierarchyPath is to enable efficient tree search.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.ParentID">
            <summary>
            Represents the column for a foreign key to the parent PersistentObject of this object.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.CreatedUser">
            <summary>
            Represents the column for a value indicating user who 
            first created this PersistentObject.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.CreatedDateTime">
            <summary>
            Represents the column for a value indicating the date and time 
            this PersistentObject was first created.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.ModifiedUser">
            <summary>
            Represents the column for a value indicating user who last 
            modified this PersistentObject.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.ModifiedDateTime">
            <summary>
            Represents the column for a value indicating the date and 
            time this PersistentObject was last modified.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.VersionNumber">
            <summary>
            Represents the column for the version number of this PersitentObject. 
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.Select(Anacle.DataFramework.ColumnAs[])">
            <summary>
            Performs a database SELECT on this table.
            </summary>
            <param name="columns">The columns to be selected as part of the results</param>
            <returns>A Query object</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.SelectDistinct(Anacle.DataFramework.ColumnAs[])">
            <summary>
            Performs a database SELECT DISTINCT on this table.
            </summary>
            <param name="columns">The columns to be selected as part of the results</param>
            <returns>A Query object</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.SelectTop(System.Int32,Anacle.DataFramework.ColumnAs[])">
            <summary>
            Performs a database SELECT on this table.
            </summary>
            <param name="columns">The columns to be selected as part of the results</param>
            <returns>A Query object</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.SelectDistinctTop(System.Int32,Anacle.DataFramework.ColumnAs[])">
            <summary>
            Performs a database SELECT DISTINCT on this table.
            </summary>
            <param name="columns">The columns to be selected as part of the results</param>
            <returns>A Query object</returns>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.schemaInfo">
            <summary>
            A SchemaInfo object that contains information about
            this schema.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.directJoins">
            <summary>
            A Hashtable of direct joins used to determine
            all joins from this table to other tables in the
            system.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.SchemaBase.schemaCommand">
            <summary>
            A SchemaCommand object that contains the insert,
            update, delete and select SQL command texts.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.Initialize">
            <summary>
            Initializes the schema object.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.RegisterSchema">
            <summary>
            Registers this schema as the root schema, and 
            registers the mapping between the Schema type 
            and PersistentObject type.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.GetPersistentObjectType">
            <summary>
            Gets the PersistentObject type represented by this SchemaBase
            class.
            </summary>
            <returns>A PersistentObject type.</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.CreateObject">
            <summary>
            Creates a PersistentObject and returns it to the application.
            </summary>
            <returns>A PersistentObject</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.LoadObject(System.Guid)">
            <summary>
            Loads a PersistentObject by the specified primary key.
            </summary>
            <param name="id">The primary key of the object to load.</param>
            <returns>The PersistentObject with the matching primary key.</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.LoadObject(System.Guid,System.Boolean)">
            <summary>
            Loads a PersistentObject by the specified primary key.
            </summary>
            <param name="id">The primary key of the object to load.</param>
            <param name="includeDeactivatedObject">A flag to indicate if a deactivated 
            object should be returned.</param>
            <returns>The PersistentObject with the matching primary key, even
            if the object's IsDeleted flag is set to 1</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.LoadObjects(Anacle.DataFramework.ExpressionCondition)">
            <summary>
            Loads a list of PersistentObjects from the database.
            </summary>
            <param name="where">The condition that the returned list of objects must satisfy.</param>
            <param name="includeDeactivatedObjects">A flag to indicate whether or not objects whose IsDeleted
            flag is set to 1 should be included in the list.</param>
            <returns>A List&lt;PersistentObject&gt;</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.LoadObjects(Anacle.DataFramework.ExpressionCondition,System.Boolean)">
            <summary>
            Loads a list of PersistentObjects from the database.
            </summary>
            <param name="where">The condition that the returned list of objects must satisfy.</param>
            <param name="includeDeactivatedObjects">A flag to indicate whether or not objects whose IsDeleted
            flag is set to 1 should be included in the list.</param>
            <returns>A List&lt;PersistentObject&gt;</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.LoadObjects(Anacle.DataFramework.ExpressionCondition,System.Boolean,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Loads a list of PersistentObjects from the database.
            </summary>
            <param name="where">The condition that the returned list of objects must satisfy.</param>
            <param name="includeDeactivatedObjects">A flag to indicate whether or not objects whose IsDeleted
            flag is set to 1 should be included in the list.</param>
            <param name="columnOrder">The order by which the results should be sorted</param>
            <returns>A List&lt;PersistentObject&gt;</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.LoadObjects(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionCondition,System.Boolean,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Loads a list of PersistentObjects from the database.
            </summary>
            <param name="where">The condition that the returned list of objects must satisfy.</param>
            <param name="having">The HAVING condition that the returned list of objects must satisfy.</param>
            <param name="includeDeactivatedObjects">A flag to indicate whether or not objects whose IsDeleted
            flag is set to 1 should be included in the list.</param>
            <param name="columnOrder">The order by which the results should be sorted</param>
            <returns>A List&lt;PersistentObject&gt;</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.LoadObjects(System.Guid,System.String)">
            <summary>
            Loads a list of PersistentObjects from the database
            through a one-to-many join.
            <para></para>
            This is for internal use only.
            </summary>
            <param name="id">The primary key of the object.</param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.LoadObjects(System.String,System.String,System.String,System.Guid)">
            <summary>
            Loads a list of Persistent Objects through a many-to-many
            join.
            </summary>
            <param name="matchTableName">The match table name.</param>
            <param name="columnName1">The column name that is a foreign key to this table.</param>
            <param name="columnName2">The column name that is a foreign key to the match table.</param>
            <param name="key1">The primary key of the target table.</param>
            <returns>A List of PersistentObjects.</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.SaveSingleObject(Anacle.DataFramework.PersistentObject)">
            <summary>
            Saves the specified object into the database, without cascading.
            </summary>
            <param name="obj">The object to be saved.</param>
            <returns>The number of rows in the database affected by this save.</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.SaveObject(Anacle.DataFramework.PersistentObject,System.Collections.ArrayList)">
            <summary>
            Saves the specified object into the database, and cascade
            saves all children objects.
            </summary>
            <param name="obj">The object to be saved.</param>
            <returns>The number of rows in the database affected by this save.</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.DeleteObject(Anacle.DataFramework.PersistentObject)">
            <summary>
            Physically deletes the specified object from the database.
            </summary>
            <param name="obj">The object to be deleted.</param>
            <returns>The number of rows in the database affected by this save.</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.GetColumn(System.String)">
            <summary>
            Gets the column by the specified column name.
            </summary>
            <param name="columnName">The column name</param>
            <returns>An ExpressionData object representing the schema's column. This is usually
            of the type SchemaXXXX.</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.Join``1(System.String,System.String,Anacle.DataFramework.SchemaJoinType)">
            <summary>
            Joins using a one-to-one or one-to-many join to another
            schema table.
            </summary>
            <typeparam name="ForeignTableType"></typeparam>
            <param name="thisTableColumnName"></param>
            <param name="foreignTableColumnName"></param>
            <param name="schemaJoinType"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.OneToOne``1(System.String)">
            <summary>
            Joins to another table using a one-to-one join.
            </summary>
            <typeparam name="ForeignTableType"></typeparam>
            <param name="thisTableColumnName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.OneToMany``1(System.String)">
            <summary>
            Joins to another table using a one-to-many join.
            </summary>
            <typeparam name="ForeignTableType"></typeparam>
            <param name="foreignTableColumnName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.ManyToMany``1(System.String,System.String,System.String)">
            <summary>
            Joins to another table using a many-to-many join.
            </summary>
            <typeparam name="ForeignTableType">The schema class of the foreign table to join to.</typeparam>
            <param name="intermediateTableName">The name of the matching table in the database responsible for joining the camp.</param>
            <param name="intermediateTableColumnName1">The name of the column in the matching table that is a foreign key to the ObjectID in this table.</param>
            <param name="intermediateTableColumnName2">The name of the column in the matching table that is a foreign key to the ObjectID to the foreign table.</param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaBase.GetJoinTable(System.String)">
            <summary>
            Gets the join table for any of the 3 relationships 
            (one-to-one, one-to-many, many-to-many) by the join
            name.
            </summary>
            <param name="joinName">The join name as declared in the Schema class.</param>
            <returns>A SchemaBase object.</returns>
        </member>
        <member name="P:Anacle.DataFramework.SchemaBase.CreatedOn">
            <summary>
            Gets the CreateDateTime column. This is present only for
            backward compatibility.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.SchemaBase.CreatedBy">
            <summary>
            Gets the CreateUser column. This is present only for
            backward compatibility.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.SchemaBase.ModifiedOn">
            <summary>
            Gets the ModifiedateTime column. This is present only for
            backward compatibility.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.SchemaBase.ModifiedBy">
            <summary>
            Gets the CreateUser column. This is present only for
            backward compatibility.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.SchemaBase.Base">
            <summary>
            Gets a TBase object that is compatible to the
            TBase object in version 5.0. However, this TBase object
            exposes only key properties and exists only for 
            backward compatibility.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.SchemaBase.SchemaInfo">
            <summary>
            Gets a SchemaInfo object that contains information about
            this schema.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.SchemaBase.SchemaCommand">
            <summary>
            Gets a SchemaCommand object that contains the insert,
            update, delete and select SQL command texts.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.#ctor">
            ----------------------------------------------------------------
            <summary>
            Constructor.
            </summary>
            ----------------------------------------------------------------
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.Initialize">
            ----------------------------------------------------------------
            <summary>
            Initializes the Schema class by creating the SchemaXXX objects for
            all the fields.
            </summary>
            ----------------------------------------------------------------
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.RegisterSchema">
            <summary>
            Registers this schema as the root schema, and 
            registers the mapping between the Schema type 
            and PersistentObject type.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.InitializeCommands">
            <summary>
            Initializes all SQL commands for the insert, updating and selecting
            from the database.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.FillUpdateCommandParameters(Anacle.DataFramework.PersistentObject,System.Data.Common.DbCommand)">
            <summary>
            Fill the update SQL command parameters.
            </summary>
            <param name="obj"></param>
            <param name="dbCommand"></param>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.FillInsertCommandParameters(Anacle.DataFramework.PersistentObject,System.Data.Common.DbCommand,System.Boolean,System.Boolean)">
            <summary>
            Fill the insert SQL command parameters
            </summary>
            <param name="obj"></param>
            <param name="dbCommand"></param>
            <param name="includeIdAndValues"></param>
            <param name="includeId"></param>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.GetTableName(System.Type)">
            <summary>
            Gets the table name in the database that is mapped by the specified Schema type.
            </summary>
            <param name="type">The Schema type.</param>
            <returns>The table name in the database</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.Select(Anacle.DataFramework.ColumnAs[])">
            <summary>
            Performs a database SELECT on this table.
            </summary>
            <remarks>
            Applications should use this method to perform queries on
            the database instead of the <code>Query.Select()</code> method.
            <para></para>
            TODO: Give an example on sub-queries.
            </remarks>
            <param name="columns">The columns to be selected as part of the results</param>
            <returns>A Query object</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.SelectDistinct(Anacle.DataFramework.ColumnAs[])">
            <summary>
            Performs a database SELECT DISTINCT on this table.
            </summary>
            <remarks>
            Applications should use this method to perform queries on
            the database instead of the <code>Query.SelectDistinct()</code> method.
            <para></para>
            TODO: Give an example on sub-queries.
            </remarks>
            <param name="columns">The columns to be selected as part of the results</param>
            <returns>A Query object</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.SelectTop(System.Int32,Anacle.DataFramework.ColumnAs[])">
            <summary>
            Performs a database SELECT TOP on this table.
            </summary>
            <remarks>
            Applications should use this method to perform queries on
            the database instead of the <code>Query.Select()</code> method.
            <para></para>
            TODO: Give an example on sub-queries.
            </remarks>
            <param name="columns">The columns to be selected as part of the results</param>
            <returns>A Query object</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.SelectDistinctTop(System.Int32,Anacle.DataFramework.ColumnAs[])">
            <summary>
            Performs a database SELECT DISTINCT TOP on this table.
            </summary>
            <remarks>
            Applications should use this method to perform queries on
            the database instead of the <code>Query.SelectDistinct()</code> method.
            <para></para>
            TODO: Give an example on sub-queries.
            </remarks>
            <param name="columns">The columns to be selected as part of the results</param>
            <returns>A Query object</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.GetPersistentObjectType">
            <summary>
            Gets the PersistentObject type represented by this Schema
            class.
            </summary>
            <returns>A PersistentObject type.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.CreateObject">
            <summary>
            Create an object and return it as a PersistentObject type.
            <para></para>
            This is for internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadObject(System.Guid)">
            <summary>
            Load an object by the ID, and return it as a persistent object.
            </summary>
            <param name="id">The primary key of the object.</param>
            <returns>A PersistentObject with the specified id as its primary key;
            null if the PersistentObject with the primary key cannot be found.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadObject(System.Guid,System.Boolean)">
            <summary>
            Load an object by the ID, and return it as a persistent object.
            </summary>
            <param name="id">The primary key of the object.</param>
            <param name="includeDeactivatedObject">A flag to indicate if a
            deactivated object should be returned.</param>
            <returns>A PersistentObject with the specified id as its primary key;
            null if the PersistentObject with the primary key cannot be found.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadObjects(Anacle.DataFramework.ExpressionCondition)">
            <summary>
            Load a list of objects and return it as a list of PersistentObjects.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadObjects(Anacle.DataFramework.ExpressionCondition,System.Boolean)">
            <summary>
            Load a list of objects and return it as a list of PersistentObjects.
            </summary>
            <param name="where"></param>
            <param name="includeDeactivatedObjects"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadObjects(Anacle.DataFramework.ExpressionCondition,System.Boolean,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Load a list of objects and return it as a list of PersistentObjects.
            <para></para>
            This is for internal use only.
            </summary>
            <param name="where"></param>
            <param name="includeDeactivatedObjects"></param>
            <param name="columnOrder">The order by which the results should be sorted</param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadObjects(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionCondition,System.Boolean,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Load a list of objects and return it as a list of PersistentObjects.
            <para></para>
            This is for internal use only.
            </summary>
            <param name="where"></param>
            <param name="includeDeactivatedObjects"></param>
            <param name="columnOrder">The order by which the results should be sorted</param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadObjects(System.Guid,System.String)">
            <summary>
            Load a list of objects and return it as a list of PersistentObjects.
            <para></para>
            This is for internal use only.
            </summary>
            <param name="id"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.SaveSingleObject(Anacle.DataFramework.PersistentObject)">
            <summary>
            Executes the appropriate SQL query and saves a single object 
            into the database.
            <para></para>
            This is for internal use only.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.SaveObject(Anacle.DataFramework.PersistentObject,System.Collections.ArrayList)">
            <summary>
            Saves the persistent object, and including the links to all objects.
            <para></para>
            This is for internal use only.
            </summary>
            <param name="obj">The PersistentObject to save.</param>
            <param name="savedObjects">An array list of saved objects, for passing into
            the PersistentObject.SaveObject() method.</param>
            <returns>The number of objects affected by this operation.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.DeleteObject(Anacle.DataFramework.PersistentObject)">
            <summary>
            Physically delete object from the database.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.GetColumnsAsArrayOfExpressionData">
            <summary>
            Gets the columns as an array of expression data.
            
            This is used by the LoadList function to load a list of objects
            if there is a HAVING condition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.Create">
            <summary>
            Creates a new object and fills up the object's data fields 
            with default values specified using the <code>Default</code> attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadObjectsFromQuery(System.String)">
            <summary>
            Loads a list of objects from the database based on the 
            SQL query passed in through the query parameter, and
            returns a list of objects based on the schema class.
            </summary>
            <param name="query">The SQL query.</param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.Load(System.Guid)">
            <summary>
            Loads an object by the ID, and returns it as the type
            based on the schema class.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.Load(System.Nullable{System.Guid})">
            <summary>
            Loads an object by the ID, and returns it as the type
            based on the schema class.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.Load(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Load a single object from the database and 
            returns it as the type based on the schema class.
            
            The object is the first object in the list returned by 
            the LoadList method.
            </summary>
            <param name="where">The where condition.</param>
            <param name="order">A list of expression or columns to sort the results by.</param>
            <returns>The first object that satisfies the search condition.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.Load(Anacle.DataFramework.ExpressionCondition,System.Boolean,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Load a single object from the database and returns it 
            as the type based on the schema class.
            
            The object is the first object in the list returned by 
            the LoadList method.
            </summary>
            <param name="where">The where condition.</param>
            <param name="includeDeactivatedObjects">A flag to indicate whether objects whose IsDeleted flag is set to 1 should be returned.</param>
            <param name="order">A list of expression or columns to sort the results by.</param>
            <returns>The first object that satisfies the search condition.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.Load(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionCondition,System.Boolean,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Load a single object from the database and returns it as the type based on the schema class.
            
            The object is the first object in the list returned by 
            the LoadList method.
            </summary>
            <param name="where">The where condition.</param>
            <param name="having">The having condition.</param>
            <param name="includeDeactivatedObjects">A flag to indicate whether objects whose IsDeleted flag is set to 1 should be returned.</param>
            <returns>The first object that satisfies the search condition.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadAll(Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Load a list of all objects from the database.
            </summary>
            <param name="order">A list of expression or columns to sort the results by.</param>
            <returns>The List of PersistentObjects that satisfies the search condition.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadAll(System.Boolean,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Load a list of all objects from the database.
            </summary>
            <param name="includeDeactivatedObjects">A flag to indicate whether objects whose IsDeleted flag is set to 1 should be returned.</param>
            <param name="order">A list of expression or columns to sort the results by.</param>
            <returns>The List of PersistentObjects that satisfies the search condition.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadList(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Load a list of objects from the database and returns it
            as a list of objects based on the schema class.
            </summary>
            <param name="where">The where condition.</param>
            <param name="order">A list of expression or columns to sort the results by.</param>
            <returns>The List of PersistentObjects that satisfies the search condition.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadList(Anacle.DataFramework.ExpressionCondition,System.Boolean,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Load a list of objects from the database and returns it
            as a list of objects based on the schema class.
            </summary>
            <param name="where">The where condition.</param>
            <param name="includeDeactivatedObjects">A flag to indicate whether objects whose IsDeleted flag is set to 1 should be returned.</param>
            <param name="order">A list of expression or columns to sort the results by.</param>
            <returns>The List of PersistentObjects that satisfies the search condition.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadList(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionCondition,System.Boolean,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Load a list of objects from the database and returns it
            as a list of objects based on the schema class. 
            
            This method simply constructs the SQL and passes it to the
            LoadObjectsFromQuery method.
            </summary>
            <param name="where">The where condition.</param>
            <param name="having">The having condition.</param>
            <param name="includeDeactivatedObjects">A flag to indicate whether objects whose IsDeleted flag is set to 1 should be returned.</param>
            <param name="order">A list of expression or columns to sort the results by.</param>
            <returns>The List of PersistentObjects that satisfies the search condition.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.DeleteAll">
            <summary>
            Physically delete all objects from the database.
            </summary>
            <returns>The number of rows affected by this operation.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.Delete(System.Guid)">
            <summary>
            Physically delete an object based on the ID.
            </summary>
            <param name="id"></param>
            <returns>The number of rows affected by this operation.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.DeleteList(Anacle.DataFramework.ExpressionCondition)">
            <summary>
            Physically delete a list of objects based that satisfies the condition specified
            in the where parameter.
            </summary>
            <param name="where"></param>
            <returns>The number of rows affected by this operation.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.DeleteObject(`0)">
            <summary>
            Physically deletes the object from the database.
            </summary>
            <param name="obj"></param>
            <returns>The number of rows affected by this operation.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.InsertMatchTable(System.String,System.String,System.String,System.Guid,System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            Inserts the foreign keys in the match table
            in order to construct the relationship between two objects.
            </summary>
            <param name="connectionString">The connection string to query the database.</param>
            <param name="tableName">The match table name.</param>
            <param name="columnName1">The column name for the foreign key of the first object.</param>
            <param name="key1">The Guid of the first object.</param>
            <param name="columnName2">The column name for the foreign key of the second object.</param>
            <param name="keys">The Guid of the second object.</param>
            <returns>The number of rows affected by this query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.DeleteMatchTable(System.String,System.String,System.String,System.Guid)">
            <summary>
            Deletes a set of foreign keys from the match table
            in order to remove the relationships from one object.
            </summary>
            <param name="connectionString">The connection string to query the database.</param>
            <param name="tableName">The match table name.</param>
            <param name="columnName">The column name for the foreign key of the object.</param>
            <param name="key">The Guid of the object.</param>
            <returns>The number of rows affected by this query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Schema`1.LoadObjects(System.String,System.String,System.String,System.Guid)">
            <summary>
            Loads a list of objects from the database based on the many-to-many match table.
            </summary>
            <param name="matchTableName">The match table name.</param>
            <param name="columnName1">The column name for the foreign key of the first object.</param>
            <param name="columnName2">The column name for the foreign key of the second object.</param>
            <param name="key1">The Guid of the first object.</param>
            <returns>A List&lt;T&gt; of objects.</returns>
        </member>
        <member name="P:Anacle.DataFramework.Schema`1.Item(System.Guid)">
            <summary>
            Loads an object from the database based on the ID, and
            returns the object based on the schema class.
            </summary>
            <param name="id">The ID of the object to be loaded from the database</param>
            <returns>A PersistentObjects of the specified ID.</returns>
        </member>
        <member name="P:Anacle.DataFramework.Schema`1.Item(System.Nullable{System.Guid})">
            <summary>
            Loads an object from the database based on the ID, and
            returns the object based on the schema class.
            </summary>
            <param name="id">The ID of the object to be loaded from the database</param>
            <returns>A PersistentObjects of the specified ID.</returns>
        </member>
        <member name="P:Anacle.DataFramework.Schema`1.Item(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Loads a list of objects from the database, and
            returns a list of objects based on the schema class.
            </summary>
            <param name="where">The where condition.</param>
            <param name="order">The list of columns for ordering the result.</param>
            <returns>A List of PersistentObjects that satisfies the condition.</returns>
        </member>
        <member name="P:Anacle.DataFramework.Schema`1.Item(Anacle.DataFramework.ExpressionCondition,System.Boolean,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Loads a list of objects from the database, and
            returns a list of objects based on the schema class.
            </summary>
            <param name="where">The where condition.</param>
            <param name="includeDeactivatedObjects">A flag to indicate if deactivated objects should be included in the result. Pass in true to load objects that have been deactivated.</param>
            <param name="order">The list of columns for ordering the result.</param>
            <returns>A List of PersistentObjects that satisfies the condition.</returns>
        </member>
        <member name="P:Anacle.DataFramework.Schema`1.Item(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionCondition,System.Boolean,Anacle.DataFramework.ColumnOrder[])">
            <summary>
            Loads a list of objects from the database, and
            returns a list of objects based on the schema class.
            </summary>
            <param name="where">The where condition.</param>
            <param name="having">The having condition.</param>
            <param name="includeDeactivatedObjects">A flag to indicate if deactivated objects should be included in the result. Pass in true to load objects that have been deactivated.</param>
            <param name="order">The list of columns for ordering the result.</param>
            <returns>A List of PersistentObjects that satisfies the condition.</returns>
        </member>
        <member name="T:Anacle.DataFramework.OSessionAudit">
            <summary>
            Represents a log that stores all logging in and logging out
            of the system. This log is filled via the <code>Security.Logon()</code>.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.PersistentObject">
            <summary>
            Represents the base class from which all PersistentObjects must derive.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.PersistentObject.dr">
            <summary>
            A DataObjectRow that is an array of all database fields in
            this PersistentObject. 
            <para></para>
            This is used internally.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.PersistentObject.isSaved">
            <summary>
            A flag that indicates whether this PersistentObject's
            Schema.SaveObject() method has been called within the
            call graph of the outermost Save() method.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.PersistentObject.isNew">
            <summary>
            A flag that indicates if this PersistentObject is new. When the Save() method
            is called, the DataFramework uses this flag to determine whether an INSERT
            or an UPDATE SQL statement should be executed.
            <para></para>
            This is used internally.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.PersistentObject.wasNew">
            <summary>
            A flag to indicate if this object was previously a new object,
            before the saving took place. This flag is actually used to
            determine if the HierarchyPath of this object should be
            updated.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.PersistentObject.isModified">
            <summary>
            A flag that indicates if any data fields in this PersistentObject have been
            modified. If this flag is false, then no changes will be made to the database
            even when the application calls the Save() method for this object.
            <para></para>
            This is used internally.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.PersistentObject.joinedObjects">
            <summary>
            A Hashtable that contains objects that are joined to this PersistentObject.
            <para></para>
            This is used internally.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.PersistentObject.objectError">
            <summary>
            A message attached to this object indicating an error that
            might have occured during any processing.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.SaveObject(System.Collections.ArrayList)">
            <summary>
            Saves this object, and cascade the saving of all joined objects 
            into the database. Several things occur before and
            after the SQL statement is executed to save/cascade-save this object.
            <para></para>
            <list>
            <item>1. Call the Validating() method.</item>
            <item>2. Call the Saving() method.</item>
            <item>3. Updates the CreatedDateTime/CreatedUser fields if this object is new.</item>
            <item>4. Updates the ModifiedDateTime/ModifiedUser fields.</item>
            <item>5. Save this object, and cascade-save all joined objects.</item>
            <item>6. Call the Saved() method.</item>
            </list>
            </summary>
            <returns>The number of objects affected by this operation</returns>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Save">
            <summary>
            Saves this object, and cascade the saving of all joined objects 
            into the database. Several things occur before and
            after the SQL statement is executed to save/cascade-save this object.
            <para></para>
            <list>
            <item>1. Call the Validating() method.</item>
            <item>2. Call the Saving() method.</item>
            <item>3. Updates the CreatedDateTime/CreatedUser fields if this object is new.</item>
            <item>4. Updates the ModifiedDateTime/ModifiedUser fields.</item>
            <item>5. Save this object, and cascade-save all joined objects.</item>
            <item>6. Call the Saved() method.</item>
            </list>
            </summary>
            <returns>The number of objects affected by this operation.</returns>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.CreateObject(System.Type)">
            <summary>
            Creates a new persistent object by the persistent object type.
            This is equivalent to calling TablesLogic.tXXXX.Create();
            </summary>
            <param name="persistentObjectType">The type of PersistentObject
            to create.</param>
            <returns>A newly created PersistentObject.</returns>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.LoadObject(System.Type,System.Guid)">
            <summary>
            Loads a PersistentObject from the database by its PersistentObject
            type and its ID.
            </summary>
            <param name="persistentObjectType">The type of the PersistentObject to be loaded.</param>
            <param name="id">The ObjectID of the PersistentObject.</param>
            <returns>The PersistentObject instance loaded from the database, if found.</returns>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.LoadObject``1(System.Guid)">
            <summary>
            Loads a PersistentObject from the database by its PersistentObject
            type and its ID.
            </summary>
            <param name="id">The ObjectID of the PersistentObject.</param>
            <returns>The PersistentObject instance loaded from the database, if found.</returns>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.GetSchemaBase">
            <summary>
            Gets the SchemaBase object corresponding to this
            object's type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Delete">
            <summary>
            Physically deletes the object from the database. If you
            wish the set the IsDelete flag of this object instead,
            use Deactivate().
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Reload">
            <summary>
            Reloads this object from the database.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.DeactivateRecursive(Anacle.DataFramework.PersistentObject)">
            <summary>
            Recursively deactivates all child objects.
            <para></para>
            Note: This does not deactivate the objects linked via the 
            one-to-one, one-to-many, or many-to-many joins.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.IsDeactivable">
            <summary>
            Indicates if this object is deactivatable. This method exists
            for compatibility. Applications should use the IsDeactivatable
            method instead.
            </summary>
            <returns>True, by default. Override methods can define logic to
            determine if this object can be deactivated.</returns>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.IsDeactivatable">
            <summary>
            Indicates if this object is deactivatable.
            </summary>
            <returns>True, by default. Override methods can define logic to
            determine if this object can be deactivated.</returns>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Deactivate">
            <summary>
            Deactivates the object by setting the IsDeleted flag of
            the object to 1.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.ActivateRecursive(Anacle.DataFramework.PersistentObject)">
            <summary>
            Recursively activates all child objects, include all objects
            that might have been deactivated on a different occasion.
            <para></para>
            This does not activate the objects linked via the 
            one-to-one, one-to-many, or many-to-many joins.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Activate">
            <summary>
            Activates the object by setting the IsDeleted flag of
            the object to 0.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.IsRemovable">
            <summary>
            Indicates if this object is removable from the specified list.
            </summary>
            <returns>True, by default. Override methods can define logic to
            determine if this object can be removed from a list.</returns>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Touch">
            <summary>
            Touches the object, so that it can be saved into the database
            even if none of the fields were modified.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Validating">
            <summary>
            Overridable.
            <para></para>
            This method is called during the Save(), but before
            the PersistentObject is saved into the database.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Created">
            <summary>
            Overrideable.
            <para></para>
            This method is called after the object is instantiated and
            initialized by calling the Tables.tXXX.Create().
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.ProcessHierarchy(System.Nullable{System.Guid})">
            <summary>
            Converts a GUID into a Base-64 encoded string.
            </summary>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.UpdateChildObjectHierarchy(System.String,Anacle.DataFramework.PersistentObject)">
            <summary>
            Recursively updates the PersistentObject's HierarchyPath for
            the specified object, and all children objects.
            </summary>
            <param name="upperHierarchyPath">The HierarchyPath of the parent above the 
            specified one.</param>
            <param name="node">The object to update.</param>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.PreSaving">
            <summary>
            This method is called before the Saving() method.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.PostSaving">
            <summary>
            This method is called after the Saving() method.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Saving">
            <summary>
            Overrideable.
            
            This method is called before the object is saved into the database.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.UpdateHierarchyPath">
            <summary>
            Updates the HierarchyPath after saving the PersistentObject into
            the database.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Saved">
            <summary>
            Overrideable.
            <para></para>
            This method is called after the object is saved into the database.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Deleting">
            <summary>
            Overrideable.
            <para></para>
            This method is called before the object is physically deleted from the database.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Deleted">
            <summary>
            Overrideable.
            <para></para>
            This method is called after the object is physically deleted from the database.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Deactivating">
            <summary>
            Overrideable.
            <para></para>
            This method is called before the object is deactivated by setting the IsDeleted flag = 1.
            <para></para>
            Note: This method will NOT be called if the object has already been deactivated.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Deactivated">
            <summary>
            Overrideable.
            <para></para>
            This method is called after the object is deactivated by setting the IsDeleted flag = 1.
            <para></para>
            Note: This method will NOT be called if the object has already been deactivated.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Activating">
            <summary>
            Overridable.
            <para></para>
            This method is called before the object is activated by setting the IsDeleted flag = 0.
            <para></para>
            Note: This method will NOT be called if the object is already activated.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Activated">
            <summary>
            Overridable.
            <para></para>
            This method is called after the object is activated by setting the IsDeleted flag = 0.
            <para></para>
            Note: This method will NOT be called if the object is already activated.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Initialized">
            <summary>
            Overrideable.
            <para></para>
            This method is called after the object initialized successfully.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Committed">
            <summary>
            Overridable.
            <para></para>
            This method is called after a call to the outermost Connection's 
            Commit() method, if the current PersistentObject has been saved
            during within transaction boundary.
            <para></para>
            If the current PersistentObject was never saved, this method
            will NOT be called.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Rolledback">
            <summary>
            Overridable.
            <para></para>
            This method is called after a call to the outermost Connection's 
            Rollback() method (or after no calls to the Commit() method), 
            if the current PersistentObject has been saved during within 
            transaction boundary.
            <para></para>
            If the current PersistentObject was never saved, this method
            will NOT be called.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.PersistentObject.oldParentID">
            <summary>
            Overrideable.
            <para></para>
            This method is called after the object is initialized, and called
            only if the object has been loaded from the database, but was not
            created through the Tables.tXXX.Create() method.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.BackupDataRecursive(System.Guid)">
            <summary>
            Backs up the datarow associated with this persistent object,
            and all linked objects recursively.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.BackupData">
            <summary>
            Backs up the current object's datarow, and all objects linked
            to the current one.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.RestoreDataRecursive(System.Guid)">
            <summary>
            Restores the datarow associated with this persistent object.
            The BackupData() method must have been called previously 
            before this method is called.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.RestoreData">
            <summary>
            Restore data.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.ClearBackupRecursive(System.Guid)">
            <summary>
            Restores the datarow associated with this persistent object.
            The BackupData() method must have been called previously 
            before this method is called.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.ClearBackup">
            <summary>
            Restore data.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.Initialize(System.Data.DataRow,Anacle.DataFramework.SchemaBase)">
            <summary>
            Initializes the PersistentObject by setting up the data fields.
            </summary>
            <param name="dr">The DataRow object from which to copy the
            values of the fields from.</param>
            <param name="schema">The SchemaBase object that represents
            the schema of this PersistentObject.</param>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.SetObject``1(System.String,``0)">
            <summary>
            Set the object. This should only be called only by the compiled descendant class.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectName"></param>
            <param name="val"></param>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.ShallowCopy(Anacle.DataFramework.PersistentObject)">
            --------------------------------------------------------------
            <summary>
            Perform a shallow copy of the specified object in this 
            current object, by copying its fields in the 
            data row into this object. 
            <para></para>
            All fields except ObjectID, CurrentactivityID, VersionNumber, 
            HierarchyPath, IsDeleted, CreatedDateTime, CreatedUser,
            ModifiedDateTime, ModifiedUser will be copied over.
            </summary>
            <param name="sourceObject"></param>
            --------------------------------------------------------------
        </member>
        <member name="M:Anacle.DataFramework.PersistentObject.IsDuplicateName">
            --------------------------------------------------------------
            <summary>
            Helper function that checks if the current object already 
            has a duplicate name defined in the current level of 
            hierarchy.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            --------------------------------------------------------------
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.ObjectID">
            <summary>
            Gets the primary key of this PersistentObject.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.ObjectName">
            <summary>
            Gets or sets the object name, which is usually the display name of the
            object. For example, the ObjectName for a location object would actually
            be its location name. 
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.ObjectNumber">
            <summary>
            Gets or sets the object number, which is usually a running number used
            as a reference. For example, the ObjectNumber for a contract object would
            actually be the contract running number, or for a purchase order, this would
            be the purchase order running number. 
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.IsDeleted">
            <summary>
            Gets a flag to indicate if this PersistentObject has been deleted (or
            deactivated) from the database.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.HierarchyPath">
            <summary>
            Gets the HierarchyPath of this PersistentObject. The HierarchyPath is a
            concatenation of list of primary keys of all chain of parents, beginning from the
            root down to this PersistentObject.
            <para></para>
            The use of a HierarchyPath is to enable efficient tree search.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.ParentID">
            <summary>
            Gets or sets a foreign key to the parent PersistentObject of this object.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.VersionNumber">
            <summary>
            Gets the version number of this PersitentObject. 
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.CreatedUser">
            <summary>
            Gets a value indicating user who first created this PersistentObject.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.CreatedDateTime">
            <summary>
            Gets a value indicating the date and time this PersistentObject was first created.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.ModifiedUser">
            <summary>
            Gets a value indicating user who last modified this PersistentObject.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.ModifiedDateTime">
            <summary>
            Gets a value indicating the date and time this PersistentObject was last modified.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.CreatedOn">
            <summary>
            Gets the date/time of creation of this PersistentObject. 
            This property exists only for compatibility. Applications
            should use the CreatedDateTime property instead.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.CreatedBy">
            <summary>
            Gets a value indicating user who first created this PersistentObject.
            This property exists only for compatibility. Applications
            should use the CreatedDateTime property instead.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.ModifiedOn">
            <summary>
            Gets a value indicating the date and time this PersistentObject was last modified.
            This property exists only for compatibility. Applications
            should use the ModifiedDateTime property instead.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.ModifiedBy">
            <summary>
            Gets a value indicating user who last modified this PersistentObject.
            This property exists only for compatibility. Applications
            should use the ModifiedDateTime property instead.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.Base">
            <summary>
            Gets an OBase object that is mostly compatible with the
            OBase object in version 5.0. However, this OBase object
            exposes only key properties and exists only for 
            backward compatibility.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.JoinedObjects">
            <summary>
            Gets a Hashtable that contains objects that are joined to this PersistentObject.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.IsNew">
            <summary>
            Gets a flag to indicate whether this PersistentObject is new and not yet
            saved into the database.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.IsModified">
            <summary>
            Gets a flag to indicate whether any of the data fields in this
            PersistentObject has been modified.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.DataRow">
            <summary>
            Gets an object representing an array of all data fields stored
            in this PersistentObject.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.ObjectError">
            <summary>
            Gets or sets the message of the error that this object 
            might be encountering. 
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.PersistentObject.Path">
            <summary>
            Gets path.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.OSessionAudit.ClearLoginHistory(System.DateTime)">
            <summary>
            Deletes login from the audit session history table older than 
            n number of days, where n is a value set up in the Application Settings.
            <para></para>
            This method is called from the application Login page.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OSessionAudit.UserName">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OSessionAudit.NetworkID">
            <summary>
            Gets or sets the network identifier, which usually is
            the IP address of the user.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OSessionAudit.ApplicationID">
            <summary>
            Gets or sets the application identifier, which is usually
            the application path.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OSessionAudit.SessionID">
            <summary>
            Gets or sets a unique session identifier for the user.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OSessionAudit.LogonDateTime">
            <summary>
            Gets or sets the log on time of the user for this session.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OSessionAudit.LastAccessDateTime">
            <summary>
            Gets or sets the last date/time the user accessed the system.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OSessionAudit.LogoffDateTime">
            <summary>
            Gets or sets the time when the user logged off the system
            by clicking on the Logout button, or by calling <code>Security.LogOff()</code>.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OSessionAudit.Succeeded">
            <summary>
            Gets or sets a flag indicating if the log on was successful.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OSessionAudit.SucceededText">
            <summary>
            Gets Text of Succeeded
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Anacle.DataFramework.DefaultAttribute" -->
        <member name="T:Anacle.DataFramework.Resources.Errors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Resources.Errors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Resources.Errors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Resources.Errors.License_UserLicenseInsufficient">
            <summary>
              Looks up a localized string similar to This new user cannot be created because you have already exceeded the number of user licenses..
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Resources.Errors.Template_EncounteredClosingMultpleWithoutOpeningMultiple">
            <summary>
              Looks up a localized string similar to Encountered a {/mutiple} tag without an opening {multiple} tag..
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Resources.Errors.Template_ExpectedInFormat">
            <summary>
              Looks up a localized string similar to Expected declaration &apos;[variable] in [property]&apos; in the multiple tag {{{0}}}..
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Resources.Errors.Template_ExpectedParameterAndValue">
            <summary>
              Looks up a localized string similar to Expected parameter=value in the in the multiple tag {{{0}}}..
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Resources.Errors.Template_PropertyNotIEnumerable">
            <summary>
              Looks up a localized string similar to The property &apos;{1}&apos; is not an IEnumerable or a list in the multiple tag {{{0}}}..
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Resources.Errors.Template_ReadingRowInvalid">
            <summary>
              Looks up a localized string similar to The readingRow parameter is invalid in the multiple tag {{{0}}}. You must enter a value greater than or equal to 1..
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Resources.Errors.Template_UnexpectedEndOfFile">
            <summary>
              Looks up a localized string similar to Unexpected end of file. Did you forget to specify a closing brace or bracket?.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Resources.Errors.Template_UnknownParameter">
            <summary>
              Looks up a localized string similar to Unknown parameter &apos;{1}&apos; is invalid in the multiple tag {{{0}}}..
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Resources.Errors.Template_VariableNameAlreadyExists">
            <summary>
              Looks up a localized string similar to The variable name &apos;{0}&apos; has already been defined and cannot be defined again..
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Resources.Errors.Template_VariableNameDoesNotExist">
            <summary>
              Looks up a localized string similar to Error while trying to access &apos;{1}&apos;. The variable name &apos;{0}&apos; has not been defined..
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.Connection">
            <summary>
            This class represents a transaction and is used by the application
            to establish a transactional boundary, within which, all saving
            and loading commands, and all native SQL statements are executed
            within a transaction.
            </summary>
            <remarks>
            To define the transactional boundary, the application should adopt
            the following declaration and closing:
            <code>
                using(Connection c = new Connection())
                {
                    // Start of the transactional boundary.
            
                    // Loading/saving.
            
                    // Commit all saves to database permanently.
                    c.Commit();
            
                    // End of the transaction boundary.
                }
            </code>
            Before the closure of the transactional boundary, the application is
            required to explicitly call the <c>Commit()</c> method. Failing which, 
            all updates to the database are rolled back. That is to say, when
            execution of the code reaches the closure of the <c>using</c> boundary,
            and no <c>Commit()</c> method is called, all updates are rolled back.
            <para></para>
            As a result of this behavior, any exceptions are thrown but are not caught 
            and handled within the transactional boundary, all database updates within
            the boundary are automatically rolled back. This helps to ensure data 
            integrity during any failure in database operations or errors arising from
            logic handling.
            </remarks>
        </member>
        <member name="F:Anacle.DataFramework.Connection.transactionScope">
            <summary>
            A TransactionScope object that represents an ambient
            transaction, within which all access to transactional 
            resources will be enlisted to the ambient transaction
            automatically. This requires SQL Server 2005 and above.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.currentAmbientTransaction">
            <summary>
            The current ambient transaction used by the DataFramework.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.previousAmbientTransaction">
            <summary>
            The previous ambient transaction used by the DataFramework.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.lockMode">
            <summary>
            The lock mode currently imposed on all select queries. 
            When set to anything other than default, the appropriate
            lock will be imposed on all rows of all tables accessed 
            by the query until the end of the transaction, when the lock
            is released.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.stackCount">
            <summary>
            The number of nested connection or transaction boundaries.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.connectionHash">
            <summary>
            A hash table of all the transactions created against the
            database.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.isCommitted">
            <summary>
            A flag to indicate whether the transaction has been committed.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.isRolledBack">
            <summary>
            A flag to indicate whether the transaction has been rolled back.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.trackedObjects">
            <summary>
            A hash table containing all PersistentObjects saved within
            this transaction boundary.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.newObjects">
            <summary>
            A hash table containing all new PersistentObjects saved within
            this transaction boundary.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.cache">
            <summary>
            A cache object that lasts only within the scope 
            of the outermost connection boundary.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.agreement">
            <summary>
            This is for internal use only.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.trainingCopy">
            <summary>
            This is for internal use only.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Connection.syncLock">
            <summary>
            A dummy object used to synchronize the creation
            of a single connection object for training copies.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Connection.#ctor">
            <summary>
            Creates a new Connection and a TransactionScope
            with ReadCommitted as its isolation level.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Connection.#ctor(Anacle.DataFramework.IsolationLevel)">
            <summary>
            Creates a new Connection and an ambient TransactionScope.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Connection.ConnectionBoundaryIsOpened">
            <summary>
            Determines if a connection boundary is currently
            opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Connection.CloseAllConnections">
            <summary>
            Closes all open connections and clear the connection
            hash table.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Connection.GetProviderFactory">
            <summary>
            Gets the DbProviderFactory object from which the
            database provider connections, commands, transactions,
            parameters can be created. This DbProviderFactory
            will be created based on the provider name specified
            in 'DBProvider' key of the configuration file 
            </summary>
            <returns>A DbProviderFactory object.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Connection.Dispose">
            <summary>
            Disposes the connection object. If this is the outermost
            connection, all connection objects will be released
            from memory.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Connection.OpenConnection(System.String)">
            <summary>
            Gets or creates transactions using specified the connection 
            string. If the DbTransaction object for the same connection
            has already been created before, then return the previously
            created DbConnection object.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>A DbConnection object.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Connection.ResolveConnectionString(System.String)">
            <summary>
            If the specified connection string begins with a '#' character,
            this method resolves the connection string to a value specified in the 
            web.config. For example, if the connection string is '#database',
            that the resolved connection string will be an appSetting value with
            'database' as the key.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Connection.ExecuteNonQueryInternal(System.String,System.Data.Common.DbCommand)">
            <summary>
            Executes a non-query against the database.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="dbCommand">The non-query to run against the database.</param>
            <returns>The number of rows affected by the non-query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Connection.ExecuteNonQuery(System.String,System.Data.Common.DbCommand)">
             <summary>
             Executes a non-query command on the database specified via the connectionString.
             </summary>
             <remarks>
             This method can be used when the DataFramework is inadequate to construct the
             query that you require, or when you would like to run your query in native
             SQL for maximum performance.
             <para></para>
             The following code illustrates how you can call this method, and access data
             in this method. Note that the connection string must be set up in the 
             app.config or web.config using <c>connstr</c> as the key.
             <code>
                 using (Connection c = new Connection())
                 {
                     DbParameter p = new DbParameter();
                     p.Direction = ParameterDirection.Input;
                     p.ParameterName = "@UserName";
                     p.DbType = DbsType.String;
                     p.Size = 255;
                     p.Value = "admin";
            
                     DbCommand cmd = new DbCommand();
                     cmd.CommandText = "UPDATE [User] SET IsDeleted = 0 WHERE [ObjectName] LIKE '%' + ? + '%'";
                     cmd.Parameters.Add(p);
            
                     int rows = 
                         Connection.ExecuteNonQuery(
                         "#connstr", cmd);
            
                     Console.WriteLine(rows + " row(s) affected");
                 }
             </code>
             </remarks>
             
             <param name="connectionString">The connection string. To force the method to read the 
             connection string from the web.config (or app.config) file, prefix the value passed in 
             with a hex ('#') symbol.</param>
             <param name="dbCommand">The <c>DbCommand</c> to be used for the query.</param>
             <returns>The number of rows affected by the last non-query SQL statement.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Connection.ExecuteNonQuery(System.String,System.String,System.Data.Common.DbParameter[])">
             <summary>
             Executes an SQL non-query statement on the database specified via the connectionString.
             </summary>
             <remarks>
             This method can be used when the DataFramework is inadequate to construct the
             query that you require, or when you would like to run your query in native
             SQL for maximum performance.
             <para></para>
             The following code illustrates how you can call this method, and access data
             in this method. Note that the connection string must be set up in the 
             app.config or web.config using <c>connstr</c> as the key.
             <code>
                 using (Connection c = new Connection())
                 {
                     DbParameter p = new DbParameter();
                     p.Direction = ParameterDirection.Input;
                     p.ParameterName = "@UserName";
                     p.DbType = DbType.String;
                     p.Size = 255;
                     p.Value = "admin";
                
                     int rows = 
                         Connection.ExecuteNonQuery(
                         "#connstr", "UPDATE [User] SET IsDeleted = 0 WHERE [ObjectName] LIKE '%' + ? + '%'", p);
            
                     Console.WriteLine(rows + " row(s) affected");
                 }
             </code>
             </remarks>
             <param name="connectionString">The connection string. To force the method to read the 
             connection string from the web.config (or app.config) file, prefix the value passed in 
             with a hex ('#') symbol.</param>
             <param name="sqlStatement">The SQL statement to execute.</param>
             <param name="sqlParams">A list of DbParameters for the query.</param>
             <returns>The number of rows affected by the last non-query SQL statement.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Connection.ExecuteQueryInternal(System.String,System.Data.Common.DbCommand)">
            <summary>
            Executes a query.
            </summary>
            <param name="connectionString"></param>
            <param name="selectCommand"></param>
        </member>
        <member name="M:Anacle.DataFramework.Connection.ExecuteQuery(System.String,System.Data.Common.DbCommand)">
            <summary>
            Executes an SQL command on the database specified via the connectionString.
            <para></para>
            A DataSet object containing the result of the query will be returned.
            </summary>
            <remarks>
            This method can be used when the DataFramework is inadequate to construct the
            query that you require, or when you would like to run your query in native
            SQL for maximum performance.
            <para></para>
            The following code illustrates how you can call this method, and access data
            in this method. Note that the connection string must be set up in the 
            app.config or web.config using <c>connstr</c> as the key.
            <code>
                using(Connection c = new Connection())
                {
                    DbCommand cmd = new DbCommand();
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = "SELECT * from [User] where [ObjectName] like '%' + ? + '%'";
                    cmd.Parameters.AddWithValue("@UserName", "admin");
                
                    DataSet ds =
                        Connection.ExecuteQuery(
                        "driver={SQL Server}; server=abell; database=abell; uid=sa; pwd=hc0811", cmd);
                
                    foreach (DataRow dr in ds.Tables[0].Rows)
                        Console.WriteLine(dr["ObjectName"]);
                }
            </code>
            </remarks>
            <param name="connectionString">The connection string. To force the method to read the 
            connection string from the web.config (or app.config) file, prefix the value passed in 
            with a hex ('#') symbol.</param>
            <param name="selectCommand">The <c>DbCommand</c> to be used for the query.</param>
            <returns>The DataSet containing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Connection.ExecuteQuery(System.String,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes an SQL query statement on the database specified via the connectionString.
            <para></para>
            A DataSet object containing the result of the query will be returned.
            </summary>
            <remarks>
            This method can be used when the DataFramework is inadequate to construct the
            query that you require, or when you would like to run your query in native
            SQL for maximum performance.
            <para></para>
            The following code illustrates how you can call this method, and access data
            in this method. Note that the connection string must be set up in the 
            app.config or web.config using <c>connstr</c> as the key.
            <code>
                using(Connection c = new Connection())
                {
                    DbParameter p = new DbParameter();
                    p.Direction = ParameterDirection.Input;
                    p.ParameterName = "@UserName";
                    p.DbType = DbType.String;
                    p.Size = 255;
                    p.Value = "admin";
                    
                    DataSet ds =
                        Connection.ExecuteQuery(
                        "#connstr", "select * from [user] where [objectname] like '%' + ? + '%'", p);
                
                    foreach (DataRow dr in ds.Tables[0].Rows)
                        Console.WriteLine(dr["ObjectName"]);
                }
            </code>
            </remarks>
            <param name="connectionString">The connection string. To force the method to read the 
            connection string from the web.config (or app.config) file, prefix the value passed in 
            with a hex ('#') symbol.</param>
            <param name="sqlStatement">The SQL statement to execute.</param>
            <param name="sqlParams">A list of DbParameters for the query.</param>
            <returns>The DataSet containing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Connection.TrackObject(System.Object)">
            <summary>
            Tracks all PersistentObjects and DataLists
            that have been saved into the database.
            </summary>
            <param name="obj">A PersistentObject or a DataList</param>
        </member>
        <member name="M:Anacle.DataFramework.Connection.ResetTrackedObjectsFlags">
            <summary>
            Resets all the isModified and isNew flags in the
            tracked objects.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Connection.CommitAll">
            <summary>
            Commits all transactions, and calls the Committed()
            method of each PersistentObject saved during
            this transaction.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Connection.ForceRollbackAndCloseAll">
            <summary>
            Rolls back all transactions opened to the different databases.
            This method is called only when an unrecoverable exception
            has occured during an SQL query, and the connection must be
            invalidated to preserver data consistency.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Connection.RollbackAll">
            <summary>
            Rolls back all transactions, and calls the Committed()
            method of each PersistentObject saved during
            this transaction.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Connection.Commit">
            <summary>
            Commits all transactions that has occurred within this transactional boundary to
            all the databases opened during the lifetime of the boundary. If this <c>Commit()</c>
            occured within a nested transaction boundary, however, nothing will be committed.
            
            No other database operations should be executed after this <c>Commit()</c> method has 
            been called.
            </summary>
            <remarks>
            The <c>Commit()</c> method tells the DataFramework to commit all transactions
            that has occurred within the transaction boundary of the connection.
            <para></para>
            The following code segment creates a new work order and several
            costs associated with the work and then calls the <c>Save()</c>
            method to save it into the database. It is then followed by a call to the 
            <c>Commit()</c> method to commit the transaction.
            <code>
                using(Connection c = new Connection())
                {
                    OWork work = TablesLogic.tWork.Create();
                    work.WorkDescription = "Air-con too cold, please kindly rectify";
                    
                    OWorkLabour workLabour = TablesLogic.tWorkLabour.Create();
                    workLabour.HourlyRate = 15.40;
                    workLabour.TechnicianName = "Johnson";
                    work.LabourList.Add(workLabour);
                    work.Save();
            
                    c.Commit();
                }
            </code>
            If you forget to call the <c>Commit()</c> method prior to the end of
            the transaction, all of the updates to the database will be lost.
            <para></para>
            Note that once the <c>Commit()</c> method has been called, the <c>Save()</c>
            method must not be called again. An exception will be thrown if you do.
            <code>
                using(Connection c = new Connection())
                {
                    OWork work = TablesLogic.tWork.Create();
                    work.WorkDescription = "Air-con too cold, please kindly rectify";
                    work.Save();
                    c.Commit();
                    
                    OWorkLabour workLabour = TablesLogic.tWorkLabour.Create();
                    workLabour.HourlyRate = 15.40;
                    workLabour.TechnicianName = "Johnson";
            
                    // an exception will be thrown right here
                    workLabour.Save();
            
                    c.Commit();
                }
            </code>
            </remarks>
        </member>
        <member name="M:Anacle.DataFramework.Connection.Rollback">
            <summary>
            Rolls back all transactions that has occurred within this transactional boundary to
            all the databases opened during the lifetime of the boundary. If this Rollback()
            occured within a nested transaction boundary, however, nothing will be committed.
            
            No other database operations should be executed after this Rollback() method has 
            been called.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Connection.SetLockMode(Anacle.DataFramework.LockMode)">
            <summary>
            Gets or sets a flag to indicate if a write lock is currently imposed on
            all select queries. If this is set, all rows of all tables 
            encountered in a query will be locked until the end of
            the transaction. 
            </summary>
            <remarks>
            This way of maintaining data integrity is pessimistic concurrency, 
            where the application explicitly acquires a lock on the object.
            Applications that use pessimistic concurrency must be aware that
            the risk of deadlock threads in a multi-user environment is likely
            to increase.
            <para></para>
            Most of the time, optimistic concurrency is sufficient (and often
            recommended) to maintain data integrity and is implicitly
            handled by the DataFramework. 
            <para></para>
            But all pessimistic locking mechanisms are implemented by the underlying database
            by issuing a locking hint as part of the SELECT SQL statement.
            For Microsoft SQL Server, a WITH(UPDLOCK) is suffixed to each table
            that appears in the Query.Select or TablesLogic.tXXXX.Select methods.
            For Oracle and MySQL, a FOR UPDATE is appended to the end of the query.
            <code>
                -- Microsoft SQL query
                SELECT t0.ObjectName
                FROM [Vendors] t0 WITH (UPDLOCK)
                WHERE t0.ObjectName LIKE '%Limited%'
                ORDER BY t0.ObjectName ASC
                
                -- Oracle / MySQL query
                SELECT t0.ObjectName
                FROM [Vendors] t0 
                WHERE t0.ObjectName LIKE '%Limited%'
                ORDER BY t0.ObjectName ASC
                FOR UPDATE
            </code>
            <para></para>
            Note: Setting this flag to LockMode.Default does not release locks already
            acquired in previous Select queries. It merely
            tells the DataFramework to stop acquiring lock for subsequent queries. 
            All locks will only be released after the outermost connection is 
            committed or rolled back.
            <para></para>
            Note: This flag is reset to false everytime a new outermost transaction
            is created.
            </remarks>
            <example>
            The following illustrates how the locking and blocking occurs for
            multiple threads trying to access the same database row.
            <para></para>
            Thread 1:
            <code>
                using(Connection c = new Connection())
                { 
                    c.SetLockMode(LockMode.UpdateLock);
                    OVendor vendor = TablesLogic.tVendor.Load(vendorId);
                    Threading.Sleep(10000); // delay by 10 seconds.
                    vendor.NumberOfYears = vendor.NumberOfYears + 1;
                    vendor.Save();
                    c.Commit();
                }
            </code>
            Thread 2:
            <code>
                using(Connection c = new Connection())
                { 
                    c.SetLockMode(LockMode.UpdateLock);
            
                    // This following line will block until Thread 1 ends
                    // the connection.
                    //
                    OVendor vendor = TablesLogic.tVendor.Load(vendorId);  
                }
            </code>
            <para></para>
            <para></para>
            The following example illustrates how the application can 
            enable the locking mechanism only for specific queries.
            <code>
                using(Connection c = new Connection())
                { 
                    // This acquires the lock for all subsequent queries.
                    c.SetLockMode(LockMode.UpdateLock);
            
                    // An update lock is imposed in this vendor
                    OVendor vendor = TablesLogic.tVendor.Load(vendorId);
                    vendor.NumberOfYears = vendor.NumberOfYears + 1;
                    vendor.Save();
            
                    // This does not acquire any lock for subsequent 
                    // queries.
                    c.SetLockMode(LockMode.Default);
            
                    // The default lock is imposed when loading vendor2
                    OVendor vendor2 = TablesLogic.tVendor.Load(vendorId2);
                    vendor2.NumberOfYears = vendor2.NumberOfYears + 1;
                    vendor2.Save();
            
                    c.Commit();
                }
            </code>
            </example>
        </member>
        <member name="M:Anacle.DataFramework.Connection.GetDBProviderSetting(System.String@,System.Boolean@,System.String@)">
            <summary>
            Determine the database provider's details such as parameter prefix, connection string, and the database provider factory
            </summary>
            <param name="paramPrefix"></param>
            <param name="positional"></param>
        </member>
        <member name="P:Anacle.DataFramework.Connection.TrainingCopy">
            <summary>
            This is for internal use only.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Connection.Cache">
            <summary>
            Gets a cache object that lasts as long as the outermost
            connection scope.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.Configuration.DataFrameworkSection">
            <summary>
            Represents the dataFramework section in the
            application configuration.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Configuration.DataFrameworkSection.Configuration">
            <summary>
            A static reference to the configuration settings in the configuration file.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Configuration.DataFrameworkSection.MaximumCacheObjects">
            <summary>
            Gets the maximum number of cached objects loaded
            from using the PersistentObject.Load or through
            a OneToOne join.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Configuration.DataFrameworkSection.LogPath">
            <summary>
            Gets the .NET qualified name of the workflow engine type.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Configuration.DataFrameworkSection.DbProvider">
            <summary>
            Gets the DbProvider class that will be used by the
            DbFactory classes to access the database.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Configuration.DataFrameworkSection.Assemblies">
            <summary>
            Gets the list of assemblies to be added as a reference
            to the compiled PersistentObject classes.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Configuration.DataFrameworkSection.Imports">
            <summary>
            Gets the list of namespaces to be imported 
            to the compiled PersistentObject classes.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.SchemaCommand">
            <summary>
            Stores a set of SQL statements that can be used to perform
            the standard Create, Read, Update, Delete operations against
            the database.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Configuration.ImportElement.Namespace">
            <summary>
            Gets the name of the assembly.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.Case">
            <summary>
            This class is used to form part of conditions to be used 
            in database queries. 
            <para></para>
            It functions like the <c>CASE</c> syntax in SQL queries, and provides
            the <c>When</c> and <c>Else</c> keyword to formulate complex query structures.
            <para></para>
            The <c>Case</c> class can be used to form part of the conditional
            expression that is passed in to the <c>Query.Where</c> method or the
            condition parameter when calling <c>Schema.Load()</c>, <c>Schema.LoadList()</c>,
            <c>Schema.LoadAll()</c>;
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Case.When(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionData)">
            <summary>
            Simulates the <c>WHEN</c> syntax of an SQL statement.
            </summary>
            <remarks>
            <para></para>
            The following code illustrates how to construct a condition
            to query a Student database.
            <code>
                List&lt;OStudent&gt; students = TablesLogic.tStudent.Load(
                    Case 
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataNumeric)0 )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataNumeric)1 )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataNumeric)2 )
                    .Else( (ExpressionDataNumeric)2 ).End == 0 );
            </code>
            The following code illustrates how to use the Case class as
            part of the results of a query.
            <code>
            
                DataTable dt = TablesLogic.tStudent.Select(
                    Case
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataString)"Elementary" )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataString)"Junior" )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataString)"College" )
                    .Else( "Nothing" ).End )
            
                    .Where( TablesLogic.tStudent.IsDeleted == 0 );
            </code>
            </remarks>
            <param name="cond">The condition to test.</param>
            <param name="exp">The expression to return if the condition holds true.</param>
            <returns>A CaseExpression object that can be used to add more When conditions to the statement.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Case.When(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionDataNumeric)">
            <summary>
            Simulates the <c>WHEN</c> syntax of an SQL statement.
            </summary>
            <remarks>
            <para></para>
            The following code illustrates how to construct a condition
            to query a Student database.
            <code>
                List&lt;OStudent&gt; students = TablesLogic.tStudent.Load(
                    Case 
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataNumeric)0 )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataNumeric)1 )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataNumeric)2 )
                    .Else( (ExpressionDataNumeric)2 ).End == 0 );
            </code>
            The following code illustrates how to use the Case class as
            part of the results of a query.
            <code>
            
                DataTable dt = TablesLogic.tStudent.Select(
                    Case
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataString)"Elementary" )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataString)"Junior" )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataString)"College" )
                    .Else( "Nothing" ).End )
            
                    .Where( TablesLogic.tStudent.IsDeleted == 0 );
            </code>
            </remarks>
            <param name="cond">The condition to test.</param>
            <param name="exp">The expression to return if the condition holds true.</param>
            <returns>A CaseExpression object that can be used to add more When conditions to the statement.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Case.When(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionDataString)">
            <summary>
            Simulates the <c>WHEN</c> syntax of an SQL statement.
            </summary>
            <remarks>
            <para></para>
            The following code illustrates how to construct a condition
            to query a Student database.
            <code>
                List&lt;OStudent&gt; students = TablesLogic.tStudent.Load(
                    Case 
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataNumeric)0 )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataNumeric)1 )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataNumeric)2 )
                    .Else( (ExpressionDataNumeric)2 ).End == 0 );
            </code>
            The following code illustrates how to use the Case class as
            part of the results of a query.
            <code>
            
                DataTable dt = TablesLogic.tStudent.Select(
                    Case
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataString)"Elementary" )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataString)"Junior" )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataString)"College" )
                    .Else( "Nothing" ).End )
            
                    .Where( TablesLogic.tStudent.IsDeleted == 0 );
            </code>
            </remarks>
            <param name="cond">The condition to test.</param>
            <param name="exp">The expression to return if the condition holds true.</param>
            <returns>A CaseExpression object that can be used to add more When conditions to the statement.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Case.When(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionDataDateTime)">
            <summary>
            Simulates the <c>WHEN</c> syntax of an SQL statement.
            </summary>
            <remarks>
            <para></para>
            The following code illustrates how to construct a condition
            to query a Student database.
            <code>
                List&lt;OStudent&gt; students = TablesLogic.tStudent.Load(
                    Case 
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataNumeric)0 )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataNumeric)1 )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataNumeric)2 )
                    .Else( (ExpressionDataNumeric)2 ).End == 0 );
            </code>
            The following code illustrates how to use the Case class as
            part of the results of a query.
            <code>
            
                DataTable dt = TablesLogic.tStudent.Select(
                    Case
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataString)"Elementary" )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataString)"Junior" )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataString)"College" )
                    .Else( "Nothing" ).End )
            
                    .Where( TablesLogic.tStudent.IsDeleted == 0 );
            </code>
            </remarks>
            <param name="cond">The condition to test.</param>
            <param name="exp">The expression to return if the condition holds true.</param>
            <returns>A CaseExpression object that can be used to add more When conditions to the statement.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Case.IsNull(Anacle.DataFramework.ExpressionData,Anacle.DataFramework.ExpressionData)">
            <summary>
            Creates a Case expression to replicate the function of the ISNULL.
            </summary>
            <example>
            The following example illustrates how to use the IsNull method.
            <code>
                // This method loads all vendors whose number of years of loss
                // is less than half the number of years in operation.
                // However, the Case.IsNull also makes sure that if the number of
                // years of loss is null, then replace it with 0 for the comparison.
                //
                List&lt;OVendor&gt; vendors = TablesLogic.tVendor.Load(
                    Case.IsNull(TablesLogic.tVendor.NumberOfYearsOfLoss, 0) &lt; TablesLogic.tVendor.NumberOfYearsInOperation / 2);
            </code>
            </example>
            <param name="expressionToTest">The expression to test for null.</param>
            <param name="expressionToReplace">The expression to replace if the first expression is null.</param>
            <returns>The first expression if not null, the second expression if the first is null.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Case.IsNull(Anacle.DataFramework.ExpressionDataNumeric,Anacle.DataFramework.ExpressionDataNumeric)">
            <summary>
            Creates a Case expression to replicate the function of the ISNULL.
            </summary>
            <example>
            The following example illustrates how to use the IsNull method.
            <code>
                // This method loads all vendors whose number of years of loss
                // is less than half the number of years in operation.
                // However, the Case.IsNull also makes sure that if the number of
                // years of loss is null, then replace it with 0 for the comparison.
                //
                List&lt;OVendor&gt; vendors = TablesLogic.tVendor.Load(
                    Case.IsNull(TablesLogic.tVendor.NumberOfYearsOfLoss, 0) &lt; TablesLogic.tVendor.NumberOfYearsInOperation / 2);
            </code>
            </example>
            <param name="expressionToTest">The expression to test for null.</param>
            <param name="expressionToReplace">The expression to replace if the first expression is null.</param>
            <returns>The first expression if not null, the second expression if the first is null.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Case.IsNull(Anacle.DataFramework.ExpressionDataString,Anacle.DataFramework.ExpressionDataString)">
            <summary>
            Creates a Case expression to replicate the function of the ISNULL.
            </summary>
            <example>
            The following example illustrates how to use the IsNull method.
            <code>
                // This method loads all vendors whose number of years of loss
                // is less than half the number of years in operation.
                // However, the Case.IsNull also makes sure that if the number of
                // years of loss is null, then replace it with 0 for the comparison.
                //
                List&lt;OVendor&gt; vendors = TablesLogic.tVendor.Load(
                    Case.IsNull(TablesLogic.tVendor.NumberOfYearsOfLoss, 0) &lt; TablesLogic.tVendor.NumberOfYearsInOperation / 2);
            </code>
            </example>
            <param name="expressionToTest">The expression to test for null.</param>
            <param name="expressionToReplace">The expression to replace if the first expression is null.</param>
            <returns>The first expression if not null, the second expression if the first is null.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Case.IsNull(Anacle.DataFramework.ExpressionDataDateTime,Anacle.DataFramework.ExpressionDataDateTime)">
            <summary>
            Creates a Case expression to replicate the function of the ISNULL.
            </summary>
            <example>
            The following example illustrates how to use the IsNull method.
            <code>
                // This method loads all vendors whose number of years of loss
                // is less than half the number of years in operation.
                // However, the Case.IsNull also makes sure that if the number of
                // years of loss is null, then replace it with 0 for the comparison.
                //
                List&lt;OVendor&gt; vendors = TablesLogic.tVendor.Load(
                    Case.IsNull(TablesLogic.tVendor.NumberOfYearsOfLoss, 0) &lt; TablesLogic.tVendor.NumberOfYearsInOperation / 2);
            </code>
            </example>
            <param name="expressionToTest">The expression to test for null.</param>
            <param name="expressionToReplace">The expression to replace if the first expression is null.</param>
            <returns>The first expression if not null, the second expression if the first is null.</returns>
        </member>
        <member name="T:Anacle.DataFramework.CaseExpression">
            <summary>
            This class becomes an Expression node that can be combined with 
            arithmetic or comparison operators to construct the query condition.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.CaseExpression.When(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionData)">
            <summary>
            Simulates the <c>WHEN</c> syntax of an SQL statement.
            </summary>
            <remarks>
            <para></para>
            The following code illustrates how to construct a condition
            to query a Student database.
            <code>
                List&lt;OStudent&gt; students = TablesLogic.tStudent.Load(
                    Case 
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataNumeric)0 )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataNumeric)1 )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataNumeric)2 )
                    .Else( (ExpressionDataNumeric)2 ).End == 0 );
            </code>
            The following code illustrates how to use the Case class as
            part of the results of a query.
            <code>
            
                DataTable dt = TablesLogic.tStudent.Select(
                    Case
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataString)"Elementary" )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataString)"Junior" )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataString)"College" )
                    .Else( "Nothing" ).End )
            
                    .Where( TablesLogic.tStudent.IsDeleted == 0 );
            </code>
            </remarks>
            <param name="cond">The condition to test.</param>
            <param name="exp">The expression to return if the condition holds true.</param>
            <returns>A CaseExpression object that can be used to add more When conditions to the statement.</returns>
        </member>
        <member name="M:Anacle.DataFramework.CaseExpression.Else(Anacle.DataFramework.ExpressionData)">
            <summary>
            Simulates the <c>ELSE</c> syntax of an SQL statement.
            </summary>
            <remarks>
            <para></para>
            The following code illustrates how to construct a condition
            to query a Student database.
            <code>
                List&lt;OStudent&gt; students = TablesLogic.tStudent.Load(
                    Case 
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataNumeric)0 )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataNumeric)1 )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataNumeric)2 )
                    .Else( (ExpressionDataNumeric)2 ).End == 0 );
            </code>
            The following code illustrates how to use the Case class as
            part of the results of a query.
            <code>
            
                DataTable dt = TablesLogic.tStudent.Select(
                    Case
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataString)"Elementary" )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataString)"Junior" )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataString)"College" )
                    .Else( "Nothing" ).End )
            
                    .Where( TablesLogic.tStudent.IsDeleted == 0 );
            </code>
            </remarks>
            <param name="cond">The condition to test.</param>
            <param name="exp">The expression to return if the condition holds true.</param>
            <returns>A CaseExpression object that can be used to add more When conditions to the statement.</returns>
        </member>
        <member name="P:Anacle.DataFramework.CaseExpression.End">
            <summary>
            Simulates the END keyword of a CASE clause.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.CaseExpressionNumeric">
            <summary>
            This class becomes an Expression node that can be combined with 
            arithmetic or comparison operators to construct the query condition.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.CaseExpressionNumeric.When(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionDataNumeric)">
            <summary>
            Simulates the <c>WHEN</c> syntax of an SQL statement.
            </summary>
            <remarks>
            <para></para>
            The following code illustrates how to construct a condition
            to query a Student database.
            <code>
                List&lt;OStudent&gt; students = TablesLogic.tStudent.Load(
                    Case 
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataNumeric)0 )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataNumeric)1 )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataNumeric)2 )
                    .Else( (ExpressionDataNumeric)2 ).End == 0 );
            </code>
            The following code illustrates how to use the Case class as
            part of the results of a query.
            <code>
            
                DataTable dt = TablesLogic.tStudent.Select(
                    Case
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataString)"Elementary" )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataString)"Junior" )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataString)"College" )
                    .Else( "Nothing" ).End )
            
                    .Where( TablesLogic.tStudent.IsDeleted == 0 );
            </code>
            </remarks>
            <param name="cond">The condition to test.</param>
            <param name="exp">The expression to return if the condition holds true.</param>
            <returns>A CaseExpression object that can be used to add more When conditions to the statement.</returns>
        </member>
        <member name="M:Anacle.DataFramework.CaseExpressionNumeric.Else(Anacle.DataFramework.ExpressionDataNumeric)">
            <summary>
            Simulates the <c>ELSE</c> syntax of an SQL statement.
            </summary>
            <remarks>
            <para></para>
            The following code illustrates how to construct a condition
            to query a Student database.
            <code>
                List&lt;OStudent&gt; students = TablesLogic.tStudent.Load(
                    Case 
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataNumeric)0 )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataNumeric)1 )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataNumeric)2 )
                    .Else( (ExpressionDataNumeric)2 ).End == 0 );
            </code>
            The following code illustrates how to use the Case class as
            part of the results of a query.
            <code>
            
                DataTable dt = TablesLogic.tStudent.Select(
                    Case
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataString)"Elementary" )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataString)"Junior" )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataString)"College" )
                    .Else( "Nothing" ).End )
            
                    .Where( TablesLogic.tStudent.IsDeleted == 0 );
            </code>
            </remarks>
            <param name="cond">The condition to test.</param>
            <param name="exp">The expression to return if the condition holds true.</param>
            <returns>A CaseExpression object that can be used to add more When conditions to the statement.</returns>
        </member>
        <member name="P:Anacle.DataFramework.CaseExpressionNumeric.End">
            <summary>
            Simulates the END keyword of a CASE clause.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.CaseExpressionString">
            <summary>
            This class becomes an Expression node that can be combined with 
            arithmetic or comparison operators to construct the query condition.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.CaseExpressionString.When(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionDataString)">
            <summary>
            Simulates the <c>WHEN</c> syntax of an SQL statement.
            </summary>
            <remarks>
            <para></para>
            The following code illustrates how to construct a condition
            to query a Student database.
            <code>
                List&lt;OStudent&gt; students = TablesLogic.tStudent.Load(
                    Case 
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataNumeric)0 )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataNumeric)1 )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataNumeric)2 )
                    .Else( (ExpressionDataNumeric)2 ).End == 0 );
            </code>
            The following code illustrates how to use the Case class as
            part of the results of a query.
            <code>
            
                DataTable dt = TablesLogic.tStudent.Select(
                    Case
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataString)"Elementary" )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataString)"Junior" )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataString)"College" )
                    .Else( "Nothing" ).End )
            
                    .Where( TablesLogic.tStudent.IsDeleted == 0 );
            </code>
            </remarks>
            <param name="cond">The condition to test.</param>
            <param name="exp">The expression to return if the condition holds true.</param>
            <returns>A CaseExpression object that can be used to add more When conditions to the statement.</returns>
        </member>
        <member name="M:Anacle.DataFramework.CaseExpressionString.Else(Anacle.DataFramework.ExpressionDataString)">
            <summary>
            Simulates the <c>ELSE</c> syntax of an SQL statement.
            </summary>
            <remarks>
            <para></para>
            The following code illustrates how to construct a condition
            to query a Student database.
            <code>
                List&lt;OStudent&gt; students = TablesLogic.tStudent.Load(
                    Case 
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataNumeric)0 )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataNumeric)1 )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataNumeric)2 )
                    .Else( (ExpressionDataNumeric)2 ).End == 0 );
            </code>
            The following code illustrates how to use the Case class as
            part of the results of a query.
            <code>
            
                DataTable dt = TablesLogic.tStudent.Select(
                    Case
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataString)"Elementary" )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataString)"Junior" )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataString)"College" )
                    .Else( "Nothing" ).End )
            
                    .Where( TablesLogic.tStudent.IsDeleted == 0 );
            </code>
            </remarks>
            <param name="cond">The condition to test.</param>
            <param name="exp">The expression to return if the condition holds true.</param>
            <returns>A CaseExpression object that can be used to add more When conditions to the statement.</returns>
        </member>
        <member name="P:Anacle.DataFramework.CaseExpressionString.End">
            <summary>
            Simulates the END keyword of a CASE clause.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.CaseExpressionDateTime">
            <summary>
            This class becomes an Expression node that can be combined with 
            arithmetic or comparison operators to construct the query condition.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.CaseExpressionDateTime.When(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionDataDateTime)">
            <summary>
            Simulates the <c>WHEN</c> syntax of an SQL statement.
            </summary>
            <remarks>
            <para></para>
            The following code illustrates how to construct a condition
            to query a Student database.
            <code>
                List&lt;OStudent&gt; students = TablesLogic.tStudent.Load(
                    Case 
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataNumeric)0 )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataNumeric)1 )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataNumeric)2 )
                    .Else( (ExpressionDataNumeric)2 ).End == 0 );
            </code>
            The following code illustrates how to use the Case class as
            part of the results of a query.
            <code>
            
                DataTable dt = TablesLogic.tStudent.Select(
                    Case
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataString)"Elementary" )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataString)"Junior" )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataString)"College" )
                    .Else( "Nothing" ).End )
            
                    .Where( TablesLogic.tStudent.IsDeleted == 0 );
            </code>
            </remarks>
            <param name="cond">The condition to test.</param>
            <param name="exp">The expression to return if the condition holds true.</param>
            <returns>A CaseExpression object that can be used to add more When conditions to the statement.</returns>
        </member>
        <member name="M:Anacle.DataFramework.CaseExpressionDateTime.Else(Anacle.DataFramework.ExpressionDataDateTime)">
            <summary>
            Simulates the <c>ELSE</c> syntax of an SQL statement.
            </summary>
            <remarks>
            <para></para>
            The following code illustrates how to construct a condition
            to query a Student database.
            <code>
                List&lt;OStudent&gt; students = TablesLogic.tStudent.Load(
                    Case 
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataNumeric)0 )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataNumeric)1 )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataNumeric)2 )
                    .Else( (ExpressionDataNumeric)2 ).End == 0 );
            </code>
            The following code illustrates how to use the Case class as
            part of the results of a query.
            <code>
            
                DataTable dt = TablesLogic.tStudent.Select(
                    Case
                    .When( TablesLogic.tStudent.Age&gt;0 &amp; TablesLogic.tStudent.Age&lt;=10, (ExpressionDataString)"Elementary" )
                    .When( TablesLogic.tStudent.Age&gt;10 &amp; TablesLogic.tStudent.Age&lt;=20, (ExpressionDataString)"Junior" )
                    .When( TablesLogic.tStudent.Age&gt;20 &amp; TablesLogic.tStudent.Age&lt;=30, (ExpressionDataString)"College" )
                    .Else( "Nothing" ).End )
            
                    .Where( TablesLogic.tStudent.IsDeleted == 0 );
            </code>
            </remarks>
            <param name="cond">The condition to test.</param>
            <param name="exp">The expression to return if the condition holds true.</param>
            <returns>A CaseExpression object that can be used to add more When conditions to the statement.</returns>
        </member>
        <member name="P:Anacle.DataFramework.CaseExpressionDateTime.End">
            <summary>
            Simulates the END keyword of a CASE clause.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.Template">
            <summary>
            Represents the Template output generator.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Template.variables">
            <summary>
            The attributes that will be used to bind to the 
            template.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Template.template">
            <summary>
            The template from which the output will be generated from.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Template.multipleInfoStack">
            <summary>
            Stack of repeaters.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Template.ignoreInvalidTags">
            <summary>
            A flag that indicates whether to ignore tags that
            are not declared as variables.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Template.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:Anacle.DataFramework.Template.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:Anacle.DataFramework.Template.RemoveSpellingErrorTags">
            <summary>
            Removes the spelling error tags that appear in a
            Microsoft Word document as these tags interfere with
            the document generation.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Template.AddVariable(System.String,System.Object)">
            <summary>
            Adds a variable into the list of variables in this
            template.
            </summary>
            <param name="variableName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Anacle.DataFramework.Template.RemoveVariable(System.String)">
            <summary>
            Removes a variable from the list of variables in this
            template.
            </summary>
            <param name="variableName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Anacle.DataFramework.Template.Eval(System.String)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="expressionWithVariableName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Template.ParseMultipleTag(System.String)">
            <summary>
            Parses the multiple tag.
            </summary>
            <param name="tag"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Anacle.DataFramework.Template.ExtractTag(System.Char,System.Int32@)" -->
        <member name="M:Anacle.DataFramework.Template.TokenizeTemplate">
            <summary>
            Tokenizes the template into tokens for simple parsing.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Template.ParseTokensIntoTree(System.Collections.Generic.List{System.String},System.Int32,System.Int32@,System.String)">
            <summary>
            Parse tokens into a tree and returns it as a
            list of objects.
            </summary>
            <param name="tokens"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Template.OutputMultiple(Anacle.DataFramework.TemplateBranchNode,System.Text.StringBuilder)">
            <summary>
            Repeats all content within a multiple tag.
            </summary>
            <param name="branchNode"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Template.SplitFirst(System.String,System.Char)">
            <summary>
            Splits the incoming string at the first ch 
            character it encounters.
            </summary>
            <param name="s"></param>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Template.OutputText(System.String,System.Text.StringBuilder)">
            <summary>
            Outputs a text node.
            </summary>
            <param name="text"></param>
            <param name="output"></param>
        </member>
        <member name="M:Anacle.DataFramework.Template.OutputNode(Anacle.DataFramework.TemplateBranchNode,System.Text.StringBuilder)">
            <summary>
            Outputs a node.
            </summary>
            <param name="branchNode"></param>
            <param name="output"></param>
        </member>
        <member name="M:Anacle.DataFramework.Template.OutputList(System.Collections.Generic.List{System.Object},System.Text.StringBuilder)">
            <summary>
            Outputs a list of objects.
            </summary>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Template.Generate">
            <summary>
            Generates the output by combining the attributes and the
            template.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Anacle.DataFramework.TemplateBranchNode">
            <summary>
            Represents an internal class used for tracking 
            nodes in the template.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.TemplateMultipleInfo">
            <summary>
            Represents an internal class used for tracking
            the current looping scope during the generation
            process.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.ExpressionCondition">
            <summary>
            Represents a SQL condition graph.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionCondition.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <param name="separator"></param>
            <param name="expressions"></param>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionCondition.op_BitwiseAnd(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionCondition)">
            <summary>
            Constructs the logical AND.
            </summary>
            <param name="leftExpression">The expression on the left-hand-side.</param>
            <param name="rightExpression">The expression on the right-hand-side.</param>
            <returns>A <c>ExpressionCondition</c> object representing to constructed condition.</returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionCondition.op_BitwiseOr(Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionCondition)">
            <summary>
            Constructs the logical OR.
            </summary>
            <param name="leftExpression">The expression on the left-hand-side.</param>
            <param name="rightExpression">The expression on the right-hand-side.</param>
            <returns>A <c>ExpressionCondition</c> object representing to constructed condition.</returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionCondition.op_LogicalNot(Anacle.DataFramework.ExpressionCondition)">
            <summary>
            Constructs the logical NOT.
            </summary>
            <param name="rightExpression">The expression on the left-hand-side.</param>
            <returns>A <c>ExpressionCondition</c> object representing to constructed condition.</returns>
        </member>
        <member name="T:Anacle.DataFramework.ColumnOrder">
            <summary>
            This class is used to allow the developer the specify ordering
            for table columns or expressions.
            </summary>
            <remarks>
            When an object of this class is rendered, the output will look
            like the following:
            <para></para>
            <code>
                [expression] ASC
            </code>
            Or if the ordering is not ascending, then the output will look like this:
            <code>
                [expression] DESC
            </code>
            </remarks>
        </member>
        <member name="M:Anacle.DataFramework.ColumnOrder.#ctor(Anacle.DataFramework.Expression,System.Boolean)">
            <summary>
            This is an internal constructor that creates a <c>ColumnOrder</c> object
            based on an <c>Expression</c>.
            </summary>
            <param name="expression">The <c>Expression</c> object that is to be ordered.</param>
            <param name="ascending">A boolean flag to indicate whether the ordering is ascending.
            If this is set to false, then the ordering is descending.</param>
        </member>
        <member name="T:Anacle.DataFramework.Query">
            <summary>
            Contains a set of functions that replicates some functionalities of an SQL query.
            <para></para>
            It also represents a Query object that can be used to extend additional clauses to
            the query. A Query object can be cast into the following types:
            <list>
            <item>1. DataTable</item>
            <item>2. ArrayList</item>
            <item>3. C# Scalar (int, decimal, string, etc)</item>
            </list>
            <para></para>
            When the Query object is cast, it forces the DataFramework to execute a query
            (that is represented by the Query object) against the database. The results
            are then converted accordingly to a DataTable, ArrayList or a C# scalar.
            <para></para>
            <example>
            The following code illustrates the casting:
            <para></para>
            <code>
                TVendor vendor = TablesLogic.tVendor;
            
                // The following code queries all vendor's ObjectID and ObjectName
                // from the vendor table, and return the results as a DataTable.
                //
                DataTable tableOfVendors = 
                    vendor.Select(vendor.ObjectName, vendor.ObjectID).
                    Where(Query.True);
            
                // The following code queries all vendor's ObjectName and returns the
                // results as an ArrayList of strings.
                //
                ArrayList listOfNames = 
                    vendor.Select(vendor.ObjectName).
                    Where(Query.True);
            
                // The following code counts the number of vendors and returns the scalar
                // result as an integer.
                //
                int numberOfVendors = 
                    vendor.Select(vendor.ObjectName.Count()).
                    Where(Query.True);
            </code>
            </example>
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Query.subqueryCount">
            <summary>
            A value that indicates the number of sub-queries the renderer
            is currently generating.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Query.numberOfResults">
            <summary>
            A value to indicate the number of results to return from 
            the database.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Query.distinct">
            <summary>
            A flag to indicate whether this select query should return
            distinct results.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Query.columns">
            <summary>
            An array of columns to be used as part of the select clause.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Query.where">
            <summary>
            The condition that the returned results must satisfy.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Query.having">
            <summary>
            The having condition that the returned results must satisfy.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Query.groupby">
            <summary>
            An array of the expressions to group the results by.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Query.orderby">
            <summary>
            An array of the expressions to sort the results by.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Query.fromSchemaBase">
            <summary>
            The Schema class from which this Query should join all its expressions from.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Query.#ctor(System.Int32,System.Boolean,Anacle.DataFramework.ColumnAs[],Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionCondition,Anacle.DataFramework.ExpressionData[],Anacle.DataFramework.ColumnOrder[],Anacle.DataFramework.SchemaBase)">
            <summary>
            Constructor.
            </summary>
            <param name="distinct"></param>
            <param name="columns"></param>
            <param name="where"></param>
            <param name="having"></param>
            <param name="groupby"></param>
            <param name="orderby"></param>
            <param name="fromSchemaBase"></param>
        </member>
        <member name="M:Anacle.DataFramework.Query.Select(Anacle.DataFramework.ColumnAs[])">
            <summary>
            The SELECT clause of a query.
            <para></para>
            This method is now obsolete. 
            </summary>
            <param name="columns">A list of expressions or columns to be selected as part of the result.</param>
            <returns>A Query object.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.SelectDistinct(Anacle.DataFramework.ColumnAs[])">
            <summary>
            The SELECT DISTINCT clause of a query.
            <para></para>
            This method is now obsolete. 
            </summary>
            <param name="columns">A list of expressions or columns to be selected as part of the result. </param>
            <returns>A Query object.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.Where(Anacle.DataFramework.ExpressionCondition)">
            <summary>
            The WHERE clause of a query.
            </summary>
            <param name="where">The condition that the results returned must satisfy.</param>
            <returns>A Query object.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.Having(Anacle.DataFramework.ExpressionCondition)">
            <summary>
            The HAVING condition of a query.
            </summary>
            <param name="having">The HAVING condition that the results returned must satisfy.</param>
            <returns>A Query object.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.GroupBy(Anacle.DataFramework.ExpressionData[])">
            <summary>
            The GROUP BY clause of a query.
            </summary>
            <param name="groupby">A list of expression or columns to group the results by.</param>
            <returns>A Query object.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.OrderBy(Anacle.DataFramework.ColumnOrder[])">
            <summary>
            The ORDER BY clause of a query.
            </summary>
            <param name="orderby">A list of expression or columns to sort the results by.</param>
            <returns>A Query object.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.Exists">
            <summary>
            Performs an EXISTS test on the query to return a condition
            indicating if the query returns any results.
            </summary>
            <example>
            The following code illustrates the use of this method:
            <code>
                TVendor vendor = TablesLogic.tVendor;
                TPart part = TablesLogic.tPart;
                
                // selects the vendor names of all vendors that
                // supplies at least one part.
                //
                DataTable dt = 
                    vendor.Select(
                    vendor.ObjectName)
                    .Where(
                    part.Select(part.ObjectName).Where(part.VendorID = vendor.ObjectID).Exists());
                    
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.Render(Anacle.DataFramework.Renderer)">
            <summary>
            Renders the Query object into an SQL statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.ToString">
            <summary>
            Renders the Query into an SQL string.
            </summary>
            <returns>The SQL statement that this Query object represents.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.DetermineConnectionString">
            <summary>
            Gets the connection string of the database against which this
            Query object should be executed. This is determined by traversing
            all expressions. It extracts the connection string from the table
            of the first expression found.
            </summary>
            <returns>The connection string specified for one of the tables in the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Data.DataSet">
            <summary>
            Executes a query and converts the results into a DataSet.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A DataSet containing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Data.DataTable">
            <summary>
            Executes a query and converts the results into a DataTable.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A DataTable containing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Collections.ArrayList">
            <summary>
            Executes a query and constructs an ArrayList using the the 
            first column of all rows in the returned results.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>An ArrayList containing the first columns of the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.ToScalar``1(Anacle.DataFramework.Query)">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into the type specified by T.
            </summary>
            <typeparam name="T">The type to convert the result to.</typeparam>
            <param name="q">The Query object to be executed.</param>
            <returns>A scalar value representing the result returned.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Nullable{System.Int32}">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into an int? type.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A value representing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Int32">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into an int type.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A value representing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Nullable{System.Decimal}">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into a decimal? type.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A value representing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Decimal">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into a decimal type.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A value representing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Nullable{System.Double}">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into a double? type.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A value representing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Double">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into a double? type.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A value representing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Nullable{System.DateTime}">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into a DateTime? type.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A value representing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.DateTime">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into a DateTime type.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A value representing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.String">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into a string type.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A value representing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Nullable{System.Guid}">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into a Guid? type.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A value representing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Guid">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into a Guid type.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A value representing the result of the query.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Query.op_Implicit(Anacle.DataFramework.Query)~System.Byte[]">
            <summary>
            Executes a query and converts the result in the first column 
            of the first row into a byte[] type.
            </summary>
            <param name="q">The Query object to be executed.</param>
            <returns>A value representing the result of the query.</returns>
        </member>
        <member name="P:Anacle.DataFramework.Query.True">
            <summary>
            Gets a condition that always returns true.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Query.False">
            <summary>
            Gets a condition that always returns false.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.Parameter">
            <summary>
            Represents a set of helper functions used for creating DbParameters.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.TBase">
            <summary>
            Represents a class that exposes some of the
            properties the original v5.0 TBase class exposes.
            This exists only for compatibility.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.TBase.schemaBase">
            <summary>
            The SchemaBase object that this TBase object wraps.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.TBase.#ctor(Anacle.DataFramework.SchemaBase)">
            <summary>
            Constructor.
            </summary>
            <param name="s"></param>
        </member>
        <member name="P:Anacle.DataFramework.TBase.ObjectName">
            <summary>
            Represents the column for the object name.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.TBase.ObjectNumber">
            <summary>
            Represents the column for the object number.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.TBase.CreatedDateTime">
            <summary>
            Represents the column for the date/time the PersistentObject was first created.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.TBase.CreatedUser">
            <summary>
            Represents the column for the user who created this PersistentObject.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.TBase.ModifiedDateTime">
            <summary>
            Represents the column for the date/time the PersistentObject was last modified.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.TBase.ModifiedUser">
            <summary>
            Represents the column for the user who last modified this PersistentObject.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.OBase">
            <summary>
            Represents a class compatible with the v5.0 OBase
            PersistentObject class. This exists only for compatibility
            implements only a subset of the properties that existed
            in the v5.0 OBase class.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.OBase.persistentObject">
            <summary>
            The PersistentObject that this OBase object wraps.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.OBase.#ctor(Anacle.DataFramework.PersistentObject)">
            <summary>
            Constructor.
            </summary>
            <param name="o"></param>
        </member>
        <member name="P:Anacle.DataFramework.OBase.ObjectName">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OBase.ObjectNumber">
            <summary>
            Gets the object number.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OBase.CreatedDateTime">
            <summary>
            Gets the date/time the PersistentObject was first created.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OBase.CreatedUser">
            <summary>
            Gets the user who created this PersistentObject.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OBase.ModifiedDateTime">
            <summary>
            Gets the date/time the PersistentObject was last modified.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.OBase.ModifiedUser">
            <summary>
            Gets the user who last modified this PersistentObject.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.LockMode">
            <summary>
            Represents the locking mode on the rows when a query is run against
            the database.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.LockMode.Default">
            <summary>
            The default locking mechanism as specified by the isolation
            level of the database transaction.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.LockMode.UpdateLock">
            <summary>
            Hints or forces the database to impose an update lock
            while selecting rows from a table.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionDataDateTime.Date">
            <summary>
            Extracts the date part of the date time, and
            sets the time to 12:00 midnight.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionDataDateTime.DayOfWeek">
            <summary>
            Gets the day of the week of the current date/time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.OUserBase.PreSaving">
            --------------------------------------------------------------
            <summary>
            Checks the total number of users created against the 
            total number users licensed for this application.
            </summary>
            --------------------------------------------------------------
        </member>
        <member name="M:Anacle.DataFramework.OUserBase.GetUserLicenseText">
            --------------------------------------------------------------
            <summary>
            Get the license text to show the number of users created
            against in the database, versus the total number of 
            users allowed in the license.
            
            This will throw an exception if the GlobalLicenseString is 
            not initialized.
            </summary>
            <returns></returns>
            --------------------------------------------------------------
        </member>
        <member name="M:Anacle.DataFramework.OUserBase.GetUserBaseCount">
            --------------------------------------------------------------
            <summary>
            Get the total number of user accounts created
            in the system
            </summary>
            <returns></returns>
            --------------------------------------------------------------
        </member>
        <member name="T:Anacle.DataFramework.UserLicenseException">
            --------------------------------------------------------------
            <summary>
            Exception for user license violation.
            </summary>
            --------------------------------------------------------------
        </member>
        <member name="T:Anacle.DataFramework.IAutoSaveHierarchyPath">
            <summary>
            Implement this interface in a PersistentObject class to 
            explicitly indicate that it should process and save the 
            hierarchy path.
            <para></para>
            All PersistentObject classes, by default, will NOT process 
            and save its hierarchy path.
            </summary>
            <example>
            The following illustrates how to decorate a PersistentObject
            class with this attribute. Note that the attribute must be
            attached to the PersistentObject class in order for it to
            be effective.
            <code>
                public TLocation : Schema&lt;OLocation&gt;
                {
                    ...
                }
            
                public OLocation : PersistentObject, IAutoSaveHierarchyPath
                {
                    ...
                }
            </code>
            </example>
        </member>
        <member name="T:Anacle.DataFramework.Audit">
            <summary>
            This class stores a thread-static global constant of the currently logged on user.
            <para></para>
            This global constant is used for tracking creation and modification of objects. If
            un-set, it always defaults to <c>*** SYSTEM ***</c>. If the developer wishes to track
            the name of the user who made updates to objects, then this global constant should
            be set to the currently logged on user's name.
            <para></para>
            In a stateless web application, this global constant should be set prior to any
            updates to the database for every request.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Audit.UserName">
            <summary>
            The global constant containing the name of the logged on user.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Renderer.RenderPlaceholder(System.Int32)">
            <summary>
            This renders a C# formatting placeholder to be used 
            for filling up the PersistentObject's insert, update
            and delete SQL commands.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Anacle.DataFramework.Renderer.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the string to the specified string size.
            </summary>
            <param name="s">The string to be truncated.</param>
            <param name="stringSize">The size to be truncated to.</param>
            <returns>The truncated string.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Renderer.RenderPrimitive(System.Object,System.Int32)">
            <summary>
            Renders an object to the internal string builder.
            <para></para>
            The object may be a null value, a DBNull.Value, an int, a double, a decimal,
            a DateTime, a string, a Guid, or a byte[].
            If the object belongs to neither of these types, then the Renderer
            renders its ToString() implementation.
            </summary>
            <param name="x">The object to render.</param>
            <param name="stringSize">The size to truncate, if the object is a string.</param>
            <returns>The rendered string.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Renderer.RenderObject(System.Object)">
            <summary>
            Renders an object to the internal string builder.
            <para></para>
            The object may be a null value, a DBNull.Value, an int, a double, a decimal,
            a DateTime, a string, a Guid, a byte[], or an Expression object.
            If the object belongs to neither of these types, then the Renderer
            renders its ToString() implementation.
            </summary>
            <param name="x">The object to render.</param>
        </member>
        <member name="M:Anacle.DataFramework.Renderer.ToString">
            <summary>
            Returns the rendered string.
            </summary>
            <returns>The rendered string.</returns>
        </member>
        <member name="M:Anacle.DataFramework.Renderer.InitializeSQLDialect">
            <summary>
            Reads the appSetting 'SQLDialect' from the configuration file 
            and initializes all rendering properties according to the dialect.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Renderer.#cctor">
            <summary>
            Static constructor to initialize specific SQL dialects.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Extensions.Like(System.String,Anacle.DataFramework.ExpressionDataString)">
            <summary>
            Compares the string to another string in SQL.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Extensions.As(System.String,System.String)">
            <summary>
            Converts the string into a ColumnAs object.
            <para></para>
            To use this: 
            <code>
               DataTable dt = 
                   user.Select(
                       "X".As("DummyColumn"),
                       user.ObjectName);
            </code>
            </summary>
            <param name="s"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Extensions.As(System.Int32,System.String)">
            <summary>
            Converts the integer value into a ColumnAs object.
            <para></para>
            To use this: 
            <code>
               DataTable dt = 
                   user.Select(
                       1.As("DummyColumn"),
                       user.ObjectName);
            </code>
            </summary>
            <param name="s"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Extensions.As(System.Decimal,System.String)">
            <summary>
            Converts the decimal value into a ColumnAs object.
            <para></para>
            To use this: 
            <code>
               DataTable dt = 
                   user.Select(
                       (1.0M).As("DummyColumn"),
                       user.ObjectName);
            </code>
            </summary>
            <param name="s"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Extensions.As(System.Double,System.String)">
            <summary>
            Converts the double value into a ColumnAs object.
            <para></para>
            To use this: 
            <code>
               DataTable dt = 
                   user.Select(
                       (1.0).As("DummyColumn"),
                       user.ObjectName);
            </code>
            </summary>
            <param name="s"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Extensions.As(System.DateTime,System.String)">
            <summary>
            Converts the DateTime value into a ColumnAs object.
            <para></para>
            To use this: 
            <code>
               DataTable dt = 
                   user.Select(
                       new DateTime(2009, 01, 01).As("DummyColumn"),
                       user.ObjectName);
            </code>
            </summary>
            <param name="s"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Extensions.Sort``1(System.Collections.Generic.List{``0},System.String,System.Boolean)">
            <summary>
            Sorts a given list by the specified property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="property"></param>
            <param name="ascending"></param>
        </member>
        <member name="M:Anacle.DataFramework.Extensions.CompareResult(System.Int32,System.String)">
            <summary>
            Returns the sorting result.
            </summary>
            <param name="result"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Extensions.Sort``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Sorts a given list by the specified sort expression.
            Examples of valid sort expressions are: <br/>
               "CreatedDateTime ASC" <br/>
               "CreatedDateTime ASC, UserName DESC" <br/>
               "UserRole.ObjectName ASC, UserName DESC" <br/>
            <para></para>
            Null values in the sorted columns always appear 
            at the top of the list regardless of the order.
            <para></para>
            Note: All sort properties are with reference to the
            object being compared.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortExpression"></param>
        </member>
        <member name="M:Anacle.DataFramework.Extensions.Sort``1(System.Collections.Generic.List{``0},System.Boolean,System.String)">
            <summary>
            Sorts a given list by the specified sort expression.
            Examples of valid sort expressions are: <br/>
               "CreatedDateTime ASC" <br/>
               "CreatedDateTime ASC, UserName DESC" <br/>
               "UserRole.ObjectName ASC, UserName DESC" <br/>
            <para></para>
            Null values in the sorted columns always appear 
            at the top of the list or at the bottom of the list,
            depending on the nullValuesBelow flag. They appear
            in those positions, regardless of the order.
            <para></para>
            Note: All sort properties are with reference to the
            object being compared.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="sortExpression"></param>
        </member>
        <member name="P:Anacle.DataFramework.Configuration.AssemblyElement.Name">
            <summary>
            Gets the name of the assembly.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.Data">
            <summary>
            This class contains helper methods useful for handling of data.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Data.LeftJoin(System.String,System.Data.DataTable,System.Data.DataTable[])">
            ---------------------------------------------------------------
             <summary>
             This helper function merges two DataTables together vertically.
             Note that the first table (table1) specified will be the result
             data table that will be returned.
             
             Since this is a left join, only items that exist in table1 
             will be returned. If items that exist in table1 but not tableX,
             columns from tableX will be zero.
             
             If there are columns with names that conflict, an exception 
             will be thrown.
             </summary>
             <param name="result"></param>
             <param name="dt"></param>
             <param name="commonColumnName"></param>
             <returns></returns>
            ---------------------------------------------------------------
        </member>
        <member name="M:Anacle.DataFramework.Data.SafeConvert``1(System.Object)">
            ---------------------------------------------------------------
             <summary>
             Convert the data safely to the required type. Returns zero
             if the conversion failed.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="v"></param>
             <returns></returns>
            ---------------------------------------------------------------
        </member>
        <member name="T:Anacle.DataFramework.ColumnSet">
            <summary>
            This class is used internally by the DataFramework.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.ColumnSet.#ctor(System.String,System.Object)">
            <summary>
            This constructor is used internally by the DataFramework.
            </summary>
            <param name="columnName"></param>
            <param name="columnValue"></param>
        </member>
        <member name="F:Anacle.DataFramework.Global.InstanceCount">
            <summary>
            A static instance counter for naming of tables used in an SQL query.
            </summary>
        </member>
        <member name="F:Anacle.DataFramework.Global.serializationBinder">
            <summary>
            A serialization binder containing the mappings between assembly and
            type names, and the concrete PersistentObject type.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.Global.GetNextTableInstanceCount">
            <summary>
            Determines and returns the next instance count for tables.
            This method ensures thread-safety by putting a lock on this
            class while access the static instance counter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Global.Initialize">
            <summary>
            Initializes the DataFramework.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.Global.SerializationBinder">
            <summary>
            Gets the PersistentObject serialization binder that can be used
            during binary deserialization to retrieve the persistent object
            type given the assembly and type names
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionDataNumeric.Abs">
            <summary>
            Computes the absolute of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionDataNumeric.Ceiling">
            <summary>
            Computes the ceiling of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionDataNumeric.Floor">
            <summary>
            Computes the floor of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionDataNumeric.Sum">
            <summary>
            Computes the sum of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionDataNumeric.Average">
            <summary>
            Computes the average of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionDataNumeric.Min">
            <summary>
            Computes the minimum of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.ExpressionDataNumeric.Max">
            <summary>
            Computes the maximum of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Anacle.DataFramework.DataFrameworkBinder">
            <summary>
            This class contains a set of methods that supports data binding to and from
            objects.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.DataFrameworkBinder.GetNonNestedValue(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the value of a property or an index property.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.DataFrameworkBinder.SetNonNestedValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a property or an indexed property.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.DataFrameworkBinder.GetType(System.Type,System.String,System.Boolean)">
            <summary>
            Inspects and returns the type of the field or property specified 
            in the <c>expression</c>.
            </summary>
            <remarks>
            This method allows the developer to determine at run-time the type
            of a property within a class or object. Take the following code
            for example:
            <example>
                public class MyClass
                {
                    public int IntValue;
                    public double DoubleValue;
            
                    public void ShowTypes()
                    {
                        Console.WriteLine(DataFrameworkBinder.GetType(typeof(MyClass), "IntValue", true).Name);
                        Console.WriteLine(DataFrameworkBinder.GetType(typeof(MyClass), "DoubleValue", true).Name);
                        Console.WriteLine(DataFrameworkBinder.GetType(typeof(MyClass), "DoubleValue.NaN", true).Name);
                    }
                }
            
            Output:
                Int32
                Double
                Double
            </example>
            In the third call to the <c>GetType</c> method, the "DoubleValue.NaN" was passed in.
            This illustrates the possibility of joining to deep-objects through the C# dot ('.') 
            operator. The developer can inspect objects of unlimited depth through the use of 
            unlimited dot ('.') operators.
            </remarks>
            <param name="type">The type of the object on which to inspect the field or property from.</param>
            <param name="expression">The field name or property name of the type to inspect. The developer
            may make use of the '.' operator to inspect types of fields or properties of deeper objects.</param>
            <param name="getType">Not used.</param>
            <returns>The type of the specified field or property.</returns>
        </member>
        <member name="M:Anacle.DataFramework.DataFrameworkBinder.GetValue(System.Object,System.String,System.Boolean)">
            <summary>
            Inspects and returns the value of the field or property specified in
            <c>expression</c>.
            </summary>
            <remarks>
            This method allows the developer to determine at run-time the value
            of a property within a class or object. Take the following code
            for example:
            <example>
                public class MyClass
                {
                    public int IntValue = 1234;
                    public double DoubleValue = 56.78;
             
                    public void ShowTypes()
                    {
                        Console.WriteLine(DataFrameworkBinder.GetValue(this, "IntValue", false));
                        Console.WriteLine(DataFrameworkBinder.GetValue(this, "DoubleValue", false));
                        Console.WriteLine(DataFrameworkBinder.GetValue(this, "DoubleValue.NaN", false));
                    }
                }
            
            Output:
                1234
                56.78
                NaN
            </example>
            In the third call to the <c>GetValue</c> method, the "DoubleValue.NaN" was passed in.
            This illustrates the possibility of joining to deep-objects through the C# dot ('.') 
            operator. The developer can inspect objects of unlimited depth through the use of 
            unlimited dot ('.') operators.
            </remarks>
            <param name="obj">The object on which to inspect the field or property. If
            the field or property is a static, then pass in the type of the class.</param>
            <param name="expression">The field name or property name of the type to inspect. The developer
            may make use of the '.' operator to inspect types of fields or properties of deeper objects.</param>
            <param name="containerType">Indicates if the <c>container</c> parameter contains an object or
            the Type of a class. Set to false if <c>container</c> is an object that you want to
            inspect, set to true if <c>container</c> is a Type that you want to inspect.</param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.DataFrameworkBinder.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the field or property specified in
            <c>expression</c>.
            </summary>
            <remarks>
            This method allows the developer to determine at run-time the value
            of a property within a class or object. Take the following code
            for example:
            <example>
                public class MyClass
                {
                    public int IntValue = 1234;
                    public double DoubleValue = 56.78;
            
                    public void ShowTypes()
                    {
                        DataFrameworkBinder.SetValue(this, "IntValue", 4321);
                        DataFrameworkBinder.SetValue(this, "DoubleValue", 87.65);
                        Console.WriteLine(IntValue);
                        Console.WriteLine(DoubleValue);
                    }
                }
            
            Output:
                4321
                87.65
            </example>
            </remarks>
            <param name="obj">The object on which to inspect the field or property.</param>
            <param name="expression">The field name or property name of the type to inspect. The developer
            may make use of the '.' operator to inspect types of fields or properties of deeper objects.</param>
            <param name="value">The value to set the field or property to.</param>
        </member>
        <member name="M:Anacle.DataFramework.DataFrameworkBinder.ClearAllLazyLoadedFlags(System.Data.DataRow)">
            <summary>
            Sets the lazy-loaded flag of the data row. This places
            a restriction on the total number of columns that a 
            GridView can display to 64 columns.
            </summary>
            <param name="dr"></param>
            <param name="columnName"></param>
        </member>
        <member name="M:Anacle.DataFramework.DataFrameworkBinder.SetLazyLoadedFlag(System.Data.DataRow,System.String)">
            <summary>
            Sets the lazy-loaded flag of the data row. This places
            a restriction on the total number of columns that a 
            GridView can display to 64 columns.
            </summary>
            <param name="dr"></param>
            <param name="columnName"></param>
        </member>
        <member name="M:Anacle.DataFramework.DataFrameworkBinder.GetLazyLoadedFlag(System.Data.DataRow,System.String)">
            <summary>
            Returns true if the lazy loaded flag of the data row / column
            has been set. Returns false otherwise.
            </summary>
            <param name="dr"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.DataFrameworkBinder.ConstructLoadOnDemandDataTable(System.Object,System.Collections.Hashtable,System.Collections.ArrayList,System.String[])">
            <summary>
            Construct a data table that can be used by the UIGridView control
            to load data on demand.
            </summary>
            <param name="list"></param>
            <param name="hash"></param>
            <param name="propertyNames"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.DataFrameworkBinder.SplitFirst(System.String,System.Char)">
            <summary>
            Splits the incoming string at the first ch 
            character it encounters.
            </summary>
            <param name="s"></param>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="T:Anacle.DataFramework.PersistentObjectSerializationBinder">
            <summary>
            Implements a serialization binder for returning a
            concrete PersistentObject type for binary deserialization.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObjectSerializationBinder.RegisterType(System.Type)">
            <summary>
            Registers a concrete PersistentObject type with
            this PersistentObjectSerializationBinder object.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Anacle.DataFramework.PersistentObjectSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            Looks up and returns the PersistentObject type
            that corresponds to the assembly name and the type
            name specified in the parameters.
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:Anacle.DataFramework.SchemaFactory">
            <summary>
            Contains methods for construction of Schema classes, and for getting
            the mapping between Schema and PersistentObject classes.
            <para></para>
            For internal use only.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.SchemaFactory.Get``1">
            <summary>
            Constructs and gets the Schema for the specified type T.
            This must be called when registerin the Schema class in
            the TablesLogic class.
            </summary>
            <typeparam name="T">The Schema type.</typeparam>
            <returns>A Schema object.</returns>
        </member>
        <member name="M:Anacle.DataFramework.SchemaFactory.GetSchema(System.Type)">
            <summary>
            Constructs and gets the schema based on the specified
            type schemaType.
            </summary>
            <param name="schemaType">The schema type to construct the Schema object from.</param>
            <returns>A Schema object.</returns>
        </member>
        <member name="T:Anacle.DataFramework.MemoryCache">
            <summary>
            Represents a simple in-process memory cache class.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.MemoryCache.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="maxItems"></param>
        </member>
        <member name="M:Anacle.DataFramework.MemoryCache.Remove(System.String)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Anacle.DataFramework.MemoryCache.Set(System.String,System.Object)">
            <summary>
            Sets an item into the cache.
            </summary>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Anacle.DataFramework.MemoryCache.Get(System.String)">
            <summary>
            Gets an item from the cache.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.MemoryCache.Clear">
            <summary>
            Clears everything in the cache.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.DatabaseAttribute">
            <summary>
            This class is used as an attribute to be attached to a descendant class
            of the <c>Schema&lt;T&gt;</c> class to specify the connection string used
            for loading and saving data for this table.
            </summary>
            <remarks>
            To specify the connection string for Schema classes, they can be defined 
            as follows:
            <code>
                [Database("#databaseConnectionString")]
                public class TWork : Schema&lt;OWork&gt;
                {
                    public SchemaString WorkDescription;
                    public SchemaDateTime ScheduledStartDateTime;
                    public SchemaDateTime ScheduledEndDateTime;
                }
                
                [Database("#smsConnectionString")]
                public class TMessage : Schema&lt;OMessage&gt;
                {
                    public SchemaString Content;
                    public SchemaString RecipientNumber;
                }
            </code>
            Note that if you do not specify a DatabaseAttribute, then
            <c>"#database"</c> will be used as the connection for the <c>Schema&lt;T&gt;</c>
            descendant.
            </remarks>
        </member>
        <member name="T:Anacle.DataFramework.DataObjectRow">
            <summary>
            This class represents the fields of a PersistentObject, 
            each field being accessible by the indexer using the column
            name of the field. It is a substitute of the ADO.NET's DataRow
            object, and contains commonly used properties with names that
            are similar to the ADO.NET's DataRow object.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.DataObjectRow.#ctor">
            <summary>
            Constructs an empty DataObjectRow object with no data
            in the hash table.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.DataObjectRow.#ctor(Anacle.DataFramework.DataObjectRow)">
            <summary>
            Constructs a new DataObjectRow by using the same columns from an
            existing DataObjectRow object. All column values are initialized
            to DBNull.Value
            </summary>
            <param name="dr"></param>
        </member>
        <member name="M:Anacle.DataFramework.DataObjectRow.#ctor(System.Data.DataRow,System.Collections.Hashtable)">
            <summary>
            Constructs a new DataObjectRow by using the data from a ADO.NET DataRow.
            </summary>
            <param name="dr"></param>
            <param name="columnNameIndex"></param>
        </member>
        <member name="M:Anacle.DataFramework.DataObjectRow.ContainsColumn(System.String)">
            <summary>
            Determines if this current data row contains the specified column name.
            
            Returns true if so, false otherwise.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.DataObjectRow.CreateRowWithSameSchema">
            <summary>
            Creates a new row with the exact same schema, but
            without the data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Anacle.DataFramework.DataObjectRow.ColumnNames">
            <summary>
            Gets a collection of column names.
            </summary>
        </member>
        <member name="P:Anacle.DataFramework.DataObjectRow.Item(System.String)">
            <summary>
            Gets or sets the column data specified by the columnName.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Anacle.DataFramework.DataObjectRow.NumberOfColumns">
            <summary>
            Gets the number of columns in this data row.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.IsolationLevel">
            <summary>
            Represents the various isolation levels used in
            a transaction.
            </summary>
        </member>
        <member name="T:Anacle.DataFramework.DatabaseSetup">
            <summary>
            This class reflects on objects of all subclasses of the Schema class 
            and generates the SQL statement to create all the tables in the database.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.DatabaseSetup.GenerateAlterColumnSQL(System.Text.StringBuilder,System.Data.Odbc.OdbcType,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Generates an SQL Server 2000-compliant SQL statement to alter
            a database column.
            </summary>
            <param name="sb">A StringBuilder object to append the newly
            generated SQL statement to.</param>
            <param name="odbcType">The ODBC data type of the column to modify to.</param>
            <param name="size">The size in the number of bytes that the column occupies.</param>
            <param name="tableName">The table name of the table this column belongs to.</param>
            <param name="columnName">The column name of the column.</param>
            <param name="definition">The string that would be used to declare the column type in SQL Server 2000-compliant syntax.</param>
            <param name="typestr">The string that would be used to identify that type of column in the information_schema table.</param>
        </member>
        <member name="M:Anacle.DataFramework.DatabaseSetup.GenerateSetupSQL(System.Type)">
            <summary>
            Generates the SQL statement that updates the entire database based
            on the schema defined in the <c>type</c> parameter passed in to
            this method.
            </summary>
            <param name="type">The type of the class that will be used to 
            generate the SQL statement.</param>
            <returns>The SQL statement that is to be used.</returns>
        </member>
        <member name="F:Anacle.DataFramework.SafeGuid.queueGuid">
            <summary>
            This queue is shared across all threads, so a proper
            lock needs to be in place when accessing this queue.
            </summary>
        </member>
        <member name="M:Anacle.DataFramework.SafeGuid.NewGuid">
            --------------------------------------------------------------
            <summary>
            Generates a GUID obtained from the SQL Server.
            </summary>
            <returns>The generated GUID.</returns>
            --------------------------------------------------------------
        </member>
        <member name="M:Anacle.DataFramework.Security.Logon(System.String,System.String,System.String)">
            <summary>
            Logs on to the system without a password. This should only
            be called if the user is logging on to Anacle.EAM with
            a windows account.
            </summary>
            <param name="loginName">The login name.</param>
            <param name="networkId">The IP address of the user.</param>
            <param name="applicationId">The application name the user is logging on to.</param>
            <returns></returns>
        </member>
        <member name="M:Anacle.DataFramework.Security.Logon(System.String,System.String,System.String,System.String)">
            <summary>
            Logs on to the system with a password. This should
            be used if the mode of authentication is through 
            the forms authentication.
            </summary>
            <param name="loginName">The login name.</param>
            <param name="unencryptedPassword">The password of the user.</param>
            <param name="networkId">The IP address of the user.</param>
            <param name="applicationId">The application name the user is logging on to.</param>
            <returns></returns>
        </member>
        <member name="T:Anacle.DataFramework.ColumnAs">
            <summary>
            This class is used to allow the developer to specify 
            an alias that is equivalent to the AS keyword of the SQL syntax.
            </summary>
            <remarks>
            When an object of this class is rendered, the output will look
            like the following:
            <para></para>
            <code>
                [expression] AS [columnName]
            </code>
            <code>
                [expression] AS [columnName]
            </code>
            </remarks>
        </member>
        <member name="M:Anacle.DataFramework.ColumnAs.#ctor(Anacle.DataFramework.Expression,System.String)">
            <summary>
            Implicit constructor to convert an <c>Expression</c> object
            to a <c>ColumnAs</c> object.
            </summary>
            <param name="expression"></param>
            <param name="columnName"></param>
        </member>
        <member name="M:Anacle.DataFramework.ColumnAs.op_Implicit(Anacle.DataFramework.ExpressionData)~Anacle.DataFramework.ColumnAs">
            <summary>
            Implicit operator to convert an ExpressionData object to a
            ColumnAs object.
            </summary>
            <remarks>
            An <c>ExpressionData</c> object can be converted automatically to a
            <c>ColumnAs</c> object and passed into the <c>TablesLogic.tStudent.Select(...)</c> method
            using this implicit operator.
            <para></para>
            <example>
            <code>
                DataTable dt = TablesLogic.tStudent.Select(
                    TablesLogic.tStudent.ObjectName );
            </code>
            In the above example, the query selects <c>TablesLogic.tStudent.ObjectName</c>.
            Since the <c>TablesLogic.tStudent.ObjectName</c> is a SchemaString column, which is
            a descendant class of ExpressionData, it gets automatically converted
            into a ColumnAs object and gets passed into the TablesLogic.tXXXX.Select method.
            <para></para>
            Since the conversion is implicitly done for the developer, the developer
            does not have to take care of the conversion manually.
            </example>
            </remarks>
            <param name="e"></param>
            <returns></returns>
        </member>
    </members>
</doc>
