//========================================================================
// $Product: Anacle Enterprise Asset Management
// $Version: 6.0
//
// Copyright 2006 (c) Anacle Systems Pte. Ltd.
// All rights reserved.
//========================================================================
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using Anacle.DataFramework;

namespace LogicLayer
{
    /// <summary>
    /// Summary description for OPurchaseOrder
    /// </summary>
    public partial class TPurchaseInvoice : LogicLayerSchema<OPurchaseInvoice>
    {
        public SchemaGuid BudgetGroupID;
        public SchemaGuid TransactionTypeGroupID;
        public SchemaInt IsInvoiceGreaterThanPOAllowed;
        public TCode TransactionTypeGroup { get { return OneToOne<TCode>("TransactionTypeGroupID"); } }
        public SchemaInt IsContainsCreditNote;
        public SchemaInt IsAutoGeneratedFromInvoice;
        public SchemaGuid AutoGeneratedCreditNoteID;
        public SchemaDateTime DateOfCreditNote;
        public SchemaString CreditNoteReferenceNumber;
        public SchemaDecimal CreditNoteAmountInSelectedCurrency;
        public SchemaDecimal CreditNoteTaxInSelectedCurrency;
        public SchemaDecimal CreditNoteAmount;
        public SchemaDecimal CreditNoteTax;
        [Size(255)]
        public SchemaString CreditNoteDescription;

    }


    /// <summary>
    /// Represents a purchase order object as a legal document to a
    /// vendor to purchase materials or services.
    /// </summary>
    public abstract partial class OPurchaseInvoice : LogicLayerPersistentObject
    {
        public abstract Guid? BudgetGroupID { get; set; }
        public abstract Guid? TransactionTypeGroupID { get; set; }
        public abstract int? IsInvoiceGreaterThanPOAllowed { get; set; }
        public abstract OCode TransactionTypeGroup { get; set; }
        public abstract int? IsContainsCreditNote { get; set; }
        public abstract int? IsAutoGeneratedFromInvoice { get; set; }
        public abstract Guid? AutoGeneratedCreditNoteID { get; set; }
        public abstract DateTime? DateOfCreditNote { get; set; }
        public abstract String CreditNoteReferenceNumber { get; set; }
        public abstract decimal? CreditNoteAmountInSelectedCurrency { get; set; }
        public abstract decimal? CreditNoteTaxInSelectedCurrency { get; set; }
        public abstract decimal? CreditNoteAmount { get; set; }
        public abstract decimal? CreditNoteTax { get; set; }
        public abstract String CreditNoteDescription { get; set; }

        /// <summary>
        /// Returns a flag indicating if the invoice exceeds PO amount.
        /// </summary>
        public bool ThisInvoiceExceedsPOAmount
        {
            get
            {
                return !ValidateInvoiceLessThanOrEqualsToPOAmount();
            }
        }


        /// <summary>
        /// Updates the invoice amount and tax in base currency.
        /// </summary>
        public override void Saving()
        {
            base.Saving();

            this.ObjectNumber = this.ReferenceNumber;
            this.ObjectName = this.Description;
            
            if (this.PurchaseOrder != null)
                this.ObjectName = String.Format("({0}) {1}", this.PurchaseOrder.ObjectNumber, this.Description);

            UpdateTotalAmountAndTaxInBaseCurrency();
        }



        /// <summary>
        /// Validates the Invoice if the invoice amount can be greater then the PO Amount
        /// </summary>
        /// <return>
        /// Returns 1 if its true
        /// Otherwise Check the sum of all pending approval,approved 
        /// and closed invoices including this one is less than the PO amt
        /// </return>
        public Boolean ValidateInvoiceLessThanOrEqualsToPOAmount()
        {
            if (this.IsInvoiceGreaterThanPOAllowed == (int)EnumApplicationGeneral.Yes)
                return true;
            else
            {
                decimal totalInvoiceAmountInSelectedCurrency = 0;
                OPurchaseOrder po = this.PurchaseOrder;
                if (po != null && 
                    this.MatchType == PurchaseMatchType.InvoiceMatchedToPO && 
                    this.InvoiceType == PurchaseInvoiceType.StandardInvoice)
                {
                    totalInvoiceAmountInSelectedCurrency = (decimal)TablesLogic.tPurchaseInvoice.Select(
                        TablesLogic.tPurchaseInvoice.TotalAmountInSelectedCurrency.Sum())
                        .Where(
                        TablesLogic.tPurchaseInvoice.ObjectID != this.ObjectID &
                        TablesLogic.tPurchaseInvoice.InvoiceType == PurchaseInvoiceType.StandardInvoice &
                        TablesLogic.tPurchaseInvoice.PurchaseOrderID == this.PurchaseOrderID &
                        (TablesLogic.tPurchaseInvoice.CurrentActivity.ObjectName == "PendingApproval" |
                            TablesLogic.tPurchaseInvoice.CurrentActivity.ObjectName == "Approved" |
                            TablesLogic.tPurchaseInvoice.CurrentActivity.ObjectName == "Close"));

                    // add up with this invoice to check if total invoice amount 
                    // less or equal to po amount.
                    //
                    totalInvoiceAmountInSelectedCurrency += this.TotalAmountInSelectedCurrency.Value;
                }
                else
                    return true;

                decimal? totalPOAmountInSelectedCurrency = 0;
                foreach (OPurchaseOrderItem item in po.PurchaseOrderItems)
                    totalPOAmountInSelectedCurrency += Round(item.QuantityOrdered * item.UnitPriceInSelectedCurrency);
                //(item.PurchaseOrder.RecoverableType == (int)EnumRecoverableType.Recoverable ? item.PurchaseOrder.TotalRecoverableAmount.Value : 0);

                if (totalInvoiceAmountInSelectedCurrency <= totalPOAmountInSelectedCurrency)
                    return true;
                else
                    return false;
            }
        }


        /// <summary>
        /// Creates a new invoice object from a purchase order.
        /// </summary>
        /// <param name="po"></param>
        /// <returns></returns>
        public static OPurchaseInvoice CreateInvoiceFromPO(OPurchaseOrder po, int invoiceType)
        {
            using (Connection c = new Connection())
            {
                TPurchaseInvoice i = TablesLogic.tPurchaseInvoice;
                decimal totalInvoiceAmountInSelectedCurrency =
                    (decimal)i.Select(i.TotalAmountInSelectedCurrency.Sum())
                    .Where(
                        i.IsDeleted == 0 &
                        i.InvoiceType == PurchaseInvoiceType.StandardInvoice &
                        i.CurrentActivity.ObjectName != "Cancelled" &
                        i.PurchaseOrderID == po.ObjectID) -
                    (decimal)i.Select(i.TotalAmountInSelectedCurrency.Sum())
                    .Where(
                        i.IsDeleted == 0 &
                        i.InvoiceType != PurchaseInvoiceType.StandardInvoice &
                        i.CurrentActivity.ObjectName != "Cancelled" &
                        i.PurchaseOrderID == po.ObjectID);


                decimal totalInvoiceAmount =
                    (decimal)i.Select(i.TotalAmount.Sum())
                    .Where(
                        i.IsDeleted == 0 &
                        i.InvoiceType == PurchaseInvoiceType.StandardInvoice &
                        i.CurrentActivity.ObjectName != "Cancelled" &
                        i.PurchaseOrderID == po.ObjectID) -
                    (decimal)i.Select(i.TotalAmount.Sum())
                    .Where(
                        i.IsDeleted == 0 &
                        i.InvoiceType != PurchaseInvoiceType.StandardInvoice &
                        i.CurrentActivity.ObjectName != "Cancelled" &
                        i.PurchaseOrderID == po.ObjectID);

                if (totalInvoiceAmountInSelectedCurrency < 0)
                    totalInvoiceAmountInSelectedCurrency = 0;
                if (totalInvoiceAmount < 0)
                    totalInvoiceAmount = 0;

                decimal? totalRecoverableInSelectedCurrecy = 0.0M;
                decimal? totalRecoverable = 0.0M;
                decimal? totalPOAmountInSelectedCurrency = 0;
                decimal? totalPOAmount = 0;
                foreach (OPurchaseOrderItem items in po.PurchaseOrderItems)
                {
                    totalPOAmountInSelectedCurrency += Round(items.UnitPriceInSelectedCurrency.Value * items.QuantityOrdered.Value);
                    //(po.RecoverableType == (int)EnumRecoverableType.Recoverable ? items.RecoverableAmountInSelectedCurrency.Value : 0);
                    totalPOAmount += Round(items.UnitPrice.Value * items.QuantityOrdered.Value);
                    //(po.RecoverableType == (int)EnumRecoverableType.Recoverable ? items.RecoverableAmount.Value : 0);
                    totalRecoverableInSelectedCurrecy += Round(items.RecoverableAmountInSelectedCurrency);

                    totalRecoverable += Round(items.RecoverableAmount);
                }

                OPurchaseInvoice invoice = TablesLogic.tPurchaseInvoice.Create();
                invoice.PurchaseOrderID = po.ObjectID;
                invoice.MatchType = PurchaseMatchType.InvoiceMatchedToPO;
                invoice.InvoiceType = invoiceType;
                invoice.LocationID = po.LocationID;
                invoice.EquipmentID = po.EquipmentID;
                invoice.BudgetGroupID = po.BudgetGroupID;
                invoice.TransactionTypeGroupID = po.TransactionTypeGroupID;
                invoice.PurchaseTypeID = po.PurchaseTypeID;
                invoice.Description = po.Description;
                invoice.VendorID = po.VendorID;
                invoice.CurrencyID = po.CurrencyID;
                invoice.DateOfInvoice = DateTime.Today;
                invoice.ForeignToBaseExchangeRate = po.ForeignToBaseExchangeRate;
                invoice.IsExchangeRateDefined = po.IsExchangeRateDefined;

                invoice.BudgetGroupID = po.BudgetGroupID;
                invoice.TransactionTypeGroupID = po.TransactionTypeGroupID;
                invoice.PurchaseTypeID = po.PurchaseTypeID;

                if (invoiceType == PurchaseInvoiceType.StandardInvoice)
                {
                    // for standard invoices, automatically
                    // compute the remaining uninvoiced amount
                    // on that PO.
                    //
                    invoice.TotalAmount = totalPOAmount - totalInvoiceAmount;
                    invoice.TotalAmountInSelectedCurrency = totalPOAmountInSelectedCurrency - totalInvoiceAmountInSelectedCurrency;

                    if (invoice.TotalAmount < 0)
                        invoice.TotalAmount = null;
                    if (invoice.TotalAmountInSelectedCurrency < 0)
                        invoice.TotalAmountInSelectedCurrency = null;
                }
                else
                {
                    invoice.TotalAmount = null;
                    invoice.TotalAmountInSelectedCurrency = null;

                    // for credit/debit memos matched to POs, auto select the
                    // invoice to credit/debit against, if only
                    // one invoice is available.
                    //
                    List<OPurchaseInvoice> invoices = TablesLogic.tPurchaseInvoice.LoadList(
                        TablesLogic.tPurchaseInvoice.InvoiceType == PurchaseInvoiceType.StandardInvoice &
                        TablesLogic.tPurchaseInvoice.CurrentActivity.ObjectName == "Approved" &
                        TablesLogic.tPurchaseInvoice.PurchaseOrderID == po.ObjectID);
                    if (invoices.Count == 1)
                        invoice.CreditDebitMemoOnInvoiceID = invoices[0].ObjectID;
                }

                invoice.TotalTax = null;
                invoice.TotalTaxInSelectedCurrency = null;
                invoice.UpdateVendorDetailsExceptCurrency();

                if (invoice.Vendor != null && invoice.Vendor.TaxCode != null &&
                    (invoice.Vendor.TaxCode.StartDate == null || invoice.Vendor.TaxCode.StartDate <= invoice.DateOfInvoice) &&
                    (invoice.Vendor.TaxCode.EndDate == null || invoice.Vendor.TaxCode.EndDate >= invoice.DateOfInvoice))
                {
                    invoice.TaxCodeID = invoice.Vendor.TaxCodeID;
                    invoice.UpdateTax();
                }

                invoice.UpdateTotalAmountAndTaxInBaseCurrency();
                invoice.UpdateApplicablePurchaseSettings();

                // 2011.06.27, Kien Trung
                // FIX: force total amount = total PO amount instead.
                // if invoice is standard invoice.
                // Fixed compute and rounding issue of invoice.
                if (invoiceType == PurchaseInvoiceType.StandardInvoice)
                {
                    // for standard invoices, automatically
                    // compute the remaining uninvoiced amount
                    // on that PO.
                    //
                    invoice.TotalAmount = totalPOAmount - totalInvoiceAmount;
                    invoice.TotalAmountInSelectedCurrency = totalPOAmountInSelectedCurrency - totalInvoiceAmountInSelectedCurrency;

                    if (invoice.TotalAmount < 0)
                        invoice.TotalAmount = null;
                    if (invoice.TotalAmountInSelectedCurrency < 0)
                        invoice.TotalAmountInSelectedCurrency = null;
                }

                if (po.POType == PurchaseOrderType.LOA)
                {
                    invoice.TotalAmount = null;
                    invoice.TotalAmountInSelectedCurrency = null;
                    invoice.TotalTax = null;
                    invoice.TotalTaxInSelectedCurrency = null;
                }

                invoice.Save();
                invoice.TriggerWorkflowEvent("SaveAsDraft");
                c.Commit();
                return invoice;
            }

        }
        /// <summary>
        /// Submits the Invoice for approval by doing: <br/>
        /// 1. Creates the budget transaction logs. <br/>
        /// 2. Creates the budget summaries and stamp them with the current
        /// budget available balance. <br/>
        /// <para></para>
        /// This method is called from the workflow. It should
        /// not be called by the developer directly.
        /// </summary>
        /// <returns></returns>
        public void SubmitForApproval()
        {
            using (Connection c = new Connection())
            {
                if (this.IsSubmittedForApproval != 1)
                {
                    CreateBudgetTransactionLogsAndSummaries();
                    this.IsSubmittedForApproval = 1;
                    //this.Save();
                    if (AutoGeneratedCreditNoteID == null)
                    {
                        if (this.IsContainsCreditNote == 1)
                        {
                            OPurchaseInvoice newCreditNote = TablesLogic.tPurchaseInvoice.Create();

                            newCreditNote.IsAutoGeneratedFromInvoice = 1;
                            newCreditNote.MatchType = this.MatchType;
                            newCreditNote.InvoiceType = PurchaseInvoiceType.CreditMemo;
                            newCreditNote.LocationID = this.LocationID;
                            newCreditNote.PurchaseOrderID = this.PurchaseOrderID;
                            newCreditNote.CreditDebitMemoOnInvoiceID = this.ObjectID;
                            newCreditNote.ReferenceNumber = this.CreditNoteReferenceNumber;
                            newCreditNote.DateOfInvoice = this.DateOfInvoice;
                            newCreditNote.BudgetGroupID = this.BudgetGroupID;
                            newCreditNote.TransactionTypeGroupID = this.TransactionTypeGroupID;
                            newCreditNote.PurchaseTypeID = this.PurchaseTypeID;
                            newCreditNote.Description = this.CreditNoteDescription;
                            newCreditNote.VendorID = this.VendorID;
                            newCreditNote.ContactAddress = this.ContactAddress;
                            newCreditNote.ContactAddressCity = this.ContactAddressCity;
                            newCreditNote.ContactAddressCountry = this.ContactAddressCountry;
                            newCreditNote.ContactAddressState = this.ContactAddressState;
                            newCreditNote.ContactCellPhone = this.ContactCellPhone;
                            newCreditNote.ContactEmail = this.ContactEmail;
                            newCreditNote.ContactFax = this.ContactFax;
                            newCreditNote.ContactPerson = this.ContactPerson;
                            newCreditNote.ContactPhone = this.ContactPhone;
                            newCreditNote.CurrencyID = this.CurrencyID;
                            newCreditNote.TaxCodeID = this.TaxCodeID;
                            newCreditNote.ForeignToBaseExchangeRate = this.ForeignToBaseExchangeRate;
                            newCreditNote.TotalAmountInSelectedCurrency = this.CreditNoteAmountInSelectedCurrency;
                            newCreditNote.TotalTaxInSelectedCurrency = this.CreditNoteTaxInSelectedCurrency;
                            newCreditNote.TotalAmount = this.CreditNoteAmount;
                            newCreditNote.TotalTax = this.CreditNoteTax;

                            newCreditNote.Save();
                            newCreditNote.TriggerWorkflowEvent("SubmitForApproval_Invoice");

                            this.AutoGeneratedCreditNoteID = newCreditNote.ObjectID;
                        }
                    }
                    else
                    {
                        OPurchaseInvoice creditnote = TablesLogic.tPurchaseInvoice[this.AutoGeneratedCreditNoteID.Value];
                        creditnote.TriggerWorkflowEvent("SubmitForApproval_Invoice");
                        creditnote.Save();
                    }
                }


                this.Save();
                c.Commit();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public OPurchaseInvoice UpdateAutoGeneratedCreditNote()
        {
            if (this.AutoGeneratedCreditNoteID != null)
            {
                OPurchaseInvoice CreditNote = TablesLogic.tPurchaseInvoice[AutoGeneratedCreditNoteID.Value];
                CreditNote.MatchType = this.MatchType;
                CreditNote.InvoiceType = PurchaseInvoiceType.CreditMemo;
                CreditNote.LocationID = this.LocationID;
                CreditNote.PurchaseOrderID = this.PurchaseOrderID;
                CreditNote.CreditDebitMemoOnInvoiceID = this.ObjectID;
                CreditNote.ReferenceNumber = this.CreditNoteReferenceNumber;
                CreditNote.DateOfInvoice = this.DateOfInvoice;
                CreditNote.BudgetGroupID = this.BudgetGroupID;
                CreditNote.TransactionTypeGroupID = this.TransactionTypeGroupID;
                CreditNote.PurchaseTypeID = this.PurchaseTypeID;
                CreditNote.Description = this.CreditNoteDescription;
                CreditNote.VendorID = this.VendorID;
                CreditNote.ContactAddress = this.ContactAddress;
                CreditNote.ContactAddressCity = this.ContactAddressCity;
                CreditNote.ContactAddressCountry = this.ContactAddressCountry;
                CreditNote.ContactAddressState = this.ContactAddressState;
                CreditNote.ContactCellPhone = this.ContactCellPhone;
                CreditNote.ContactEmail = this.ContactEmail;
                CreditNote.ContactFax = this.ContactFax;
                CreditNote.ContactPerson = this.ContactPerson;
                CreditNote.ContactPhone = this.ContactPhone;
                CreditNote.CurrencyID = this.CurrencyID;
                CreditNote.TaxCodeID = this.TaxCodeID;
                CreditNote.ForeignToBaseExchangeRate = this.ForeignToBaseExchangeRate;
                CreditNote.TotalAmountInSelectedCurrency = this.CreditNoteAmountInSelectedCurrency;
                CreditNote.TotalTaxInSelectedCurrency = this.CreditNoteTaxInSelectedCurrency;
                CreditNote.TotalAmount = this.CreditNoteAmount;
                CreditNote.TotalTax = this.CreditNoteTax;
                return CreditNote;
            }
            return null;
        }
        /// <summary>
        /// Cancels the Invoice by doing the following: <br/>
        /// 1. Unlink all PO line items from RFQ / WJ line items. <br/>
        /// 2. Cancel all PO budget transactions. <br/>
        /// 3. Undo the transfer of the previous RFQ budget transactions. <br/>
        /// <para></para>
        /// This method is called from the workflow. It should
        /// not be called by the developer directly.
        /// </summary>
        /// <returns></returns>
        public void Cancel()
        {
            using (Connection c = new Connection())
            {
                // FIX: 2011.05.23, Kim Foong, If the PO is in the Closed status, then set it to Pending Receipt.
                // FIX: 2011.08.22, Kien Trung, If this Invoice Standard Invoice, then set PO to Pending Receipt. 
                //
                if (this.PurchaseOrder != null &&
                    this.InvoiceType == PurchaseInvoiceType.StandardInvoice &&
                    this.PurchaseOrder.CurrentActivity.ObjectName == "Close")
                {
                    // Activate all budget transaction logs.
                    //
                    List<Guid> purchaseBudgetIds = new List<Guid>();
                    foreach (OPurchaseBudget purchaseBudget in this.PurchaseOrder.PurchaseBudgets)
                        purchaseBudgetIds.Add(purchaseBudget.ObjectID.Value);

                    List<OBudgetTransactionLog> budgetTransactionLogs = TablesLogic.tBudgetTransactionLog.LoadList(
                        TablesLogic.tBudgetTransactionLog.PurchaseBudgetID.In(purchaseBudgetIds), true);

                    foreach (OBudgetTransactionLog budgetTransactionLog in budgetTransactionLogs)
                        budgetTransactionLog.Activate();

                    // Set the state back to PendingReceipt.
                    //
                    //Anacle.WorkflowFramework.WorkflowEngine.Engine.SetState(
                    //    this.PurchaseOrder.CurrentActivity.WorkflowInstanceID, "PendingReceipt");
                    Anacle.WorkflowFramework.WorkflowEngine.Engine.SetState(
                        this.PurchaseOrder, this.PurchaseOrder.CurrentActivity.CurrentStateName, this.PurchaseOrder.CurrentActivity.WorkflowInstanceID, "PendingReceipt");

                }

                // 2011.08.22, Kien Trung, If there is credit note submitted together with invoice, then cancel it as well.
                //
                if (this.AutoGeneratedCreditNoteID != null)
                {
                    OPurchaseInvoice creditnote = TablesLogic.tPurchaseInvoice[this.AutoGeneratedCreditNoteID.Value];
                    creditnote.TriggerWorkflowEvent("Cancel");
                    creditnote.Save();
                }

                OPurchaseBudget.UndoTransferBudgetTransactionLogs(this.PurchaseBudgets);
                this.PurchaseBudgetSummaries.Clear();

                this.Save();
                c.Commit();
            }
        }
        /// <summary>
        /// Updates the tax for credit note
        /// </summary>
        public void UpdateCreditNoteTax()
        {

            if (this.CreditNoteAmountInSelectedCurrency != null && this.TaxCode != null)
                // FIX: 2011.05.23, Kim Foong, Round the computation of credit note tax to 2 decimal places.
                //this.CreditNoteTaxInSelectedCurrency = this.CreditNoteAmountInSelectedCurrency * this.TaxCode.TaxPercentage / 100;
                this.CreditNoteTaxInSelectedCurrency = Round(this.CreditNoteAmountInSelectedCurrency * this.TaxCode.TaxPercentage / 100);
        }
        /// <summary>
        /// Updates the total invoice amount and tax in base currency for credit note
        /// </summary>
        public void UpdateCreditNoteAmountAndTaxInBaseCurrency()
        {
            this.CreditNoteAmount = Round(this.CreditNoteAmountInSelectedCurrency * this.ForeignToBaseExchangeRate);
            this.CreditNoteTax = Round(this.CreditNoteTaxInSelectedCurrency * this.ForeignToBaseExchangeRate);
        }

        /// <summary>
        /// 
        /// </summary>
        public void InvoiceSubmittedForApproval()
        {
            // 2011.03.22
            // Commented this out because none of the MARCOM purchase orders
            // have been migrated over to the new PO workflow.
            /*
            if (this.PurchaseOrder != null && System.Configuration.ConfigurationManager.AppSettings["CustomizedInstance"] == "MARCOM")
            {

                List<OPurchaseInvoice> pendingApprovalInvoice = TablesLogic.tPurchaseInvoice.LoadList(
                                                                TablesLogic.tPurchaseInvoice.PurchaseOrderID == this.PurchaseOrderID &
                                                                TablesLogic.tPurchaseInvoice.CurrentActivity.CurrentStateName == "PendingApproval");
                using (Connection c = new Connection())
                {
                    if (pendingApprovalInvoice.Count > 0 || this.CurrentActivity.CurrentStateName == "PendingApproval")
                    {
                        if (this.PurchaseOrder.CurrentActivity.CurrentStateName != "PendingInvoiceApproval")
                        {
                            this.PurchaseOrder.SaveAndTransit("InvoiceSubmittedForApproval");

                        }
                    }
                    else
                    {
                        if (this.CurrentActivity.CurrentStateName == "Approved" & this.PurchaseOrder.CurrentActivity.CurrentStateName!="Close")
                        {
                            decimal totalAmount = (decimal)TablesLogic.tPurchaseInvoice.Select(TablesLogic.tPurchaseInvoice.TotalAmountInSelectedCurrency.Sum())
                                                       .Where(TablesLogic.tPurchaseInvoice.CurrentActivity.CurrentStateName.In("Approved", "Close") &
                                                              TablesLogic.tPurchaseInvoice.PurchaseOrderID == this.PurchaseOrderID &
                                                              (TablesLogic.tPurchaseInvoice.IsAutoGeneratedFromInvoice == null | TablesLogic.tPurchaseInvoice.IsAutoGeneratedFromInvoice == 0) &
                                                              TablesLogic.tPurchaseInvoice.IsDeleted == 0);
                            if (totalAmount == this.PurchaseOrder.SubTotalInSelectedCurrency)
                            {
                                //this.PurchaseOrder.TriggerWorkflowEvent("Close");
                                //this.PurchaseOrder.Save();
                            }
                            else
                            {
                                if (this.PurchaseOrder.CurrentActivity.CurrentStateName != "PendingReceipt")
                                {
                                    this.PurchaseOrder.TriggerWorkflowEvent("SubmitForReceipt");
                                    this.PurchaseOrder.Save();
                                }
                            }
                        }
                    }
                    c.Commit();
                }
            }*/
        }


    }


}

