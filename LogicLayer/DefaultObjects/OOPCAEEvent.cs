//========================================================================
// $Product: Simplism Enterprise Asset Management
// $Version: 1.0
//
// All rights reserved.
//========================================================================
using System;
using System.Collections.Generic;
using System.Text;

using Anacle.DataFramework;

namespace LogicLayer
{
    public class TOPCAEEvent : LogicLayerSchema<OOPCAEEvent>
    {
        [Size(255)]
        public SchemaString Description;
        public SchemaString OPCEventSource;
        public SchemaGuid OPCAEServerID;
        public SchemaInt IsApplicableForLocation;
        public SchemaGuid LocationID;
        public SchemaGuid EquipmentID;
        [Size(255), Default("*")]
        public SchemaString ConditionNames;
        [Size(255), Default("*")]
        public SchemaString SubConditionNames;
        [Default(0)]
        public SchemaInt SeverityFrom;
        [Default(1000)]
        public SchemaInt SeverityTo;
        [Default(0)]
        public SchemaInt CreateWorkOnEvent;
        public SchemaInt NumberOfEventsToTriggerAction;
        [Default(0)]
        public SchemaInt NumberOfEventsSoFar;
        [Default(1)]
        public SchemaInt CreateOnlyIfWorksAreCancelledOrClosed;
        public SchemaGuid PointTriggerID;
        public SchemaGuid TypeOfWorkID;
        public SchemaGuid TypeOfServiceID;
        public SchemaGuid TypeOfProblemID;
        public SchemaInt Priority;
        [Size(255)]
        public SchemaString WorkDescription;
        [Default(0)]
        public SchemaInt SaveHistoricalEvents;

        public TLocation Location { get { return OneToOne<TLocation>("LocationID"); } }
        public TEquipment Equipment { get { return OneToOne<TEquipment>("EquipmentID"); } }
        public TOPCAEServer OPCAEServer { get { return OneToOne<TOPCAEServer>("OPCAEServerID"); } }
        public TOPCAEEventHistory OPCAEEventHistory { get { return OneToMany<TOPCAEEventHistory>("OPCAEEventID"); } }
        public TPointTrigger PointTrigger { get { return OneToOne<TPointTrigger>("PointTriggerID"); } }
    }


    /// <summary>
    /// Represents an OPC alarm or an event so that when this
    /// event is generated by the OPC AE server, an appropriate
    /// action can be taken.
    /// </summary>
    [Serializable]
    public abstract class OOPCAEEvent : LogicLayerPersistentObject
    {
        /// <summary>
        /// [Column] Gets or sets the description of this point.
        /// </summary>
        public abstract String Description { get; set; }

        /// <summary>
        /// [Column] Gets or sets the OPC Event source name.
        /// </summary>
        public abstract String OPCEventSource { get; set; }

        /// <summary>
        /// [Column] Gets or sets the foreign key to the
        /// OPCAEServer table that represents the AE Server
        /// in which this point is associated with.
        /// </summary>
        public abstract Guid? OPCAEServerID { get; set; }

        /// <summary>
        /// [Column] Gets or sets a flag indicating whether
        /// or not the point is applicable for a location
        /// or for an equipment.
        /// </summary>
        public abstract int? IsApplicableForLocation { get; set; }

        /// <summary>
        /// [Column] Gets or sets the foreign key to the
        /// Location table that represents the location
        /// that this point is attached to. The point
        /// can only be attached to either a Location or
        /// an Equipment but not both.
        /// </summary>
        public abstract Guid? LocationID { get; set; }

        /// <summary>
        /// [Column] Gets or sets the foreign key to the
        /// Equipment table that represents the equipment
        /// that this point is attached to. The point
        /// can only be attached to either a Location or
        /// an Equipment but not both.
        /// </summary>
        public abstract Guid? EquipmentID { get; set; }

        /// <summary>
        /// [Column] Gets or sets a comma separated list of
        /// condition names that causes a breached event.
        /// Use '*' to indicate that all conditions will
        /// cause a breach.
        /// <para></para>
        /// Note: This applies only to condition events.
        /// </summary>
        public abstract string ConditionNames { get; set; }

        /// <summary>
        /// [Column] Gets or sets a comma separated list of
        /// sub-condition names that causes a breached event.
        /// Use '*' to indicate that all sub-conditions will
        /// cause a breach.
        /// <para></para>
        /// Note: This applies only to condition events.
        /// </summary>
        public abstract string SubConditionNames { get; set; }

        /// <summary>
        /// [Column] Gets or sets the range of the severity 
        /// level that causes a breached event.
        /// </summary>
        public abstract int? SeverityFrom { get; set; }

        /// <summary>
        /// [Column] Gets or sets the range of the severity 
        /// level that causes a breached event.
        /// </summary>
        public abstract int? SeverityTo { get; set; }

        /// <summary>
        /// [Column] Gets or sets a flag that indicates whether
        /// a work will be created when the reading breaches
        /// the acceptable range.
        /// </summary>
        public abstract int? CreateWorkOnEvent { get; set; }

        /// <summary>
        /// [Column] Gets or sets the number of consecutive events 
        /// that have breached the acceptable limits so far before
        /// a Work will be created.
        /// </summary>
        public abstract int? NumberOfEventsToTriggerAction { get; set; }

        /// <summary>
        /// [Column] Gets or sets the number of consecutive events that 
        /// have breached the acceptable limits so far. Once an action is 
        /// taken, this value will be reset to 0.
        /// </summary>
        public abstract int? NumberOfEventsSoFar { get; set; }

        /// <summary>
        /// [Column] Gets or sets a flag that indicates if
        /// a work should be created if existing works created by
        /// this event are cancelled or closed.
        /// </summary>
        public abstract int? CreateOnlyIfWorksAreCancelledOrClosed { get; set; }

        /// <summary>
        /// [Column] Gets or sets the foreign key to the PointTrigger
        /// table that indicates the trigger parameters to be used
        /// to create the work when an event is raised.
        /// </summary>
        public abstract Guid? PointTriggerID { get; set; }

        /// <summary>
        /// [Column] Gets or sets the foreign key to the code table
        /// that indicates the type of work of the Work that
        /// will be created if the readings breach the acceptable
        /// range.
        /// </summary>
        public abstract Guid? TypeOfWorkID { get; set; }

        /// <summary>
        /// [Column] Gets or sets the foreign key to the code table
        /// that indicates the type of service of the Work that
        /// will be created if the readings breach the acceptable
        /// range.
        /// </summary>
        public abstract Guid? TypeOfServiceID { get; set; }

        /// <summary>
        /// [Column] Gets or sets the foreign key to the code table
        /// that indicates the type of problem of the Work that
        /// will be created if the readings breach the acceptable
        /// range.
        /// </summary>
        public abstract Guid? TypeOfProblemID { get; set; }

        /// <summary>
        /// [Column] Gets or sets the foreign key to the code table
        /// that indicates the priority of the Work that
        /// will be created if the readings breach the acceptable
        /// range.
        /// </summary>
        public abstract int? Priority { get; set; }

        /// <summary>
        /// [Column] Gets or sets the foreign key to the code table
        /// that indicates the description of the Work that
        /// will be created if the readings breach the acceptable
        /// range.
        /// </summary>
        public abstract String WorkDescription { get; set; }

        /// <summary>
        /// [Column] Gets or sets a flag that indicates
        /// whether historical events will be saved.
        /// </summary>
        public abstract int? SaveHistoricalEvents { get; set; }

        /// <summary>
        /// [One-to-One Join OPCPoint.LocationID = Location.ObjectID]
        /// Gets the OLocation object that represents the
        /// location this OPC point is associated with.
        /// </summary>
        public abstract OLocation Location { get; set; }

       
        /// <summary>
        /// [One-to-One Join OPCPoint.EquipmentID = Equipment.ObjectID]
        /// Gets the OEquipment object that represents the
        /// equipment this OPC point is associated with.
        /// </summary>
        public abstract OEquipment Equipment { get; set; }

        
        /// <summary>
        /// [One-to-One Join OPCPoint.OPCAEServerID = OPCAEServer.ObjectID]
        /// Gets the OOPCAEServer object that represents that
        /// AE Server that this OPC point is associated with.
        /// </summary>
        public abstract OOPCAEServer OPCAEServer { get; set; }

        public abstract OOPCAEEventHistory OPCAEEventHistory { get; set; }

        /// <summary>
        /// Gets or sets a OPointTrigger object that indicates the 
        /// trigger parameters to be used to create the work when 
        /// an event is raised.
        /// </summary>
        public abstract OPointTrigger PointTrigger { get; set; }
        
        /// <summary>
        /// This method is called when an alarm matching the 
        /// conditions is raised.
        /// <para></para>
        /// You can override the implementation of this method
        /// to derive more functionality whenever an alarm/event
        /// is raised.
        /// </summary>
        public virtual void EventRaised(OOPCAEEventHistory eventHistory)
        {
        }

        /// <summary>
        /// This method will return latest record of this OPCAEEvent if applicable,
        /// otherwise null will be returned
        /// </summary>
        /// <returns></returns>
        public OOPCAEEventHistory LatestEvent
        {
            get {
                TOPCAEEventHistory h = TablesLogic.tOPCAEEventHistory;
                Guid id = Guid.Empty;
                
                id = h.SelectTop(1, h.ObjectID)
                    .Where(this.ObjectID == h.OPCAEEventID)
                    .OrderBy(h.DateOfEvent.Desc);

                if (id != Guid.Empty)
                    return h.Load(id);
                else
                    return null;
            }
        }


        /// <summary>
        /// Validates that there is no other point with the 
        /// same OPC item name using the same OPC DA server.
        /// </summary>
        /// <returns></returns>
        public bool ValidateNoDuplicateOPCEventSource()
        {
            if (this.OPCAEServerID != null)
            {
                if (TablesLogic.tOPCAEEvent.Select(
                    TablesLogic.tOPCAEEvent.ObjectID.Count())
                    .Where(
                    TablesLogic.tOPCAEEvent.IsDeleted == 0 &
                    TablesLogic.tOPCAEEvent.OPCAEServerID == this.OPCAEServerID &
                    TablesLogic.tOPCAEEvent.OPCEventSource == this.OPCEventSource &
                    TablesLogic.tOPCAEEvent.ObjectID != this.ObjectID) > 0)
                    return false;
            }
            return true;
        }
    }
}

