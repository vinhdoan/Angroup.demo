//========================================================================
// $Product: Simplism Enterprise Asset Management
// $Version: 1.0
//
// All rights reserved.
//========================================================================
using System;
using System.Data;
using System.Collections.Generic;
using System.Text;

using Anacle.DataFramework;

namespace LogicLayer
{
    public class TOPCAEEventHistory : LogicLayerSchema<OOPCAEEventHistory>
    {
        public SchemaGuid OPCAEEventID;

        public SchemaDateTime DateOfEvent;
        [Size(100)]
        public SchemaString Source;
        [Size(100)]
        public SchemaString ConditionName;
        [Size(100)]
        public SchemaString SubConditionName;
        [Size(255)]
        public SchemaString Message;
        public SchemaInt EventCategory;
        public SchemaInt Severity;
        public SchemaInt EventType;
        public SchemaGuid CreateOnEventWorkID;

        public TOPCAEEvent OPCAEEvent { get { return OneToOne<TOPCAEEvent>("OPCAEEventID"); } }
        public TWork CreateOnEventWork { get { return OneToOne<TWork>("CreateOnEventWorkID"); } }
    }


    /// <summary>
    /// Represents an OPC alarm or an event so that when this
    /// event is generated by the OPC AE server, an appropriate
    /// action can be taken.
    /// </summary>
    [Serializable]
    public abstract class OOPCAEEventHistory : LogicLayerPersistentObject
    {
        /// <summary>
        /// [Column] Gets or sets the foreign key to the
        /// OPCAEEvent table that indicates the AE Event
        /// that was received from the OPC AE server.
        /// </summary>
        public abstract Guid? OPCAEEventID { get; set; }

        /// <summary>
        /// [Column] Gets or sets the date of the
        /// event received from the OPC AE server.
        /// </summary>
        public abstract DateTime? DateOfEvent { get; set; }

        /// <summary>
        /// [Column] Gets or sets the source of the
        /// event received from the OPC AE server.
        /// </summary>
        public abstract String Source { get; set; }

        /// <summary>
        /// [Column] Gets or sets the condition name
        /// of the event received from the OPC AE server.
        /// </summary>
        public abstract String ConditionName { get; set; }

        /// <summary>
        /// [Column] Gets or sets the sub-condition name
        /// of the event received from the OPC AE server.
        /// </summary>
        public abstract String SubConditionName { get; set; }

        /// <summary>
        /// [Column] Gets or sets the message
        /// of the event received from the OPC AE server.
        /// </summary>
        public abstract String Message { get; set; }

        /// <summary>
        /// [Column] Gets or sets the event category
        /// of the event received from the OPC AE server.
        /// </summary>
        public abstract int? EventCategory { get; set; }

        /// <summary>
        /// [Column] Gets or sets the severity
        /// of the event received from the OPC AE server.
        /// </summary>
        public abstract Int32? Severity { get; set; }

        /// <summary>
        /// [Column] Gets or sets a flag indicating the
        /// whether event received from the OPC AE server
        /// is a tracking event.
        /// </summary>
        public abstract Int32? EventType { get; set; }

        /// <summary>
        /// [Column] Gets or sets the foreign key to the Work
        /// table indicate the work that was generated as a
        /// result of receiving this event from the OPC AE
        /// server.
        /// </summary>
        public abstract Guid? CreateOnEventWorkID { get; set; }


        /// <summary>
        /// Checks if a string exists in an array of strings.
        /// </summary>
        /// <param name="names"></param>
        /// <param name="name"></param>
        private bool Contains(string[] names, string name)
        {
            if (name != null)
            {
                name = name.Trim().ToLower();
                foreach (string n in names)
                {
                    string x = n.Trim().ToLower();
                    if (x == "*" || x == name)
                        return true;
                }
            }
            return false;
        }


        /// <summary>
        /// Creates a new work and transits it. 
        /// </summary>
        protected void CreateWork(OOPCAEEvent opcAeEvent)
        {
            OWork work = TablesLogic.tWork.Create();
            if (opcAeEvent.LocationID != null)
            {
                work.LocationID = opcAeEvent.LocationID;
                work.EquipmentID = null;
            }
            else
            {
                work.LocationID = opcAeEvent.Equipment.LocationID;
                work.EquipmentID = opcAeEvent.EquipmentID;
            }

            if (opcAeEvent.PointTrigger != null)
            {
                work.Priority = opcAeEvent.PointTrigger.Priority;
                work.TypeOfWorkID = opcAeEvent.PointTrigger.TypeOfWorkID;
                work.TypeOfServiceID = opcAeEvent.PointTrigger.TypeOfServiceID;
                work.TypeOfProblemID = opcAeEvent.PointTrigger.TypeOfProblemID;
                work.WorkDescription = opcAeEvent.PointTrigger.WorkDescription;
            }
            else
            {
                work.Priority = opcAeEvent.Priority;
                work.TypeOfWorkID = opcAeEvent.TypeOfWorkID;
                work.TypeOfServiceID = opcAeEvent.TypeOfServiceID;
                work.TypeOfProblemID = opcAeEvent.TypeOfProblemID;
                work.WorkDescription = opcAeEvent.WorkDescription;
            }
            work.GeneratedByOPCAEEventHistoryID = this.ObjectID;
            work.GeneratedByOPCAEEventID = opcAeEvent.ObjectID;
            work.Save();
            work.TriggerWorkflowEvent("SaveAsDraft");

            this.CreateOnEventWorkID = work.ObjectID;
        }


        /// <summary>
        /// Checks if the reading has breached the OPC point's
        /// range of acceptable values. 
        /// </summary>
        /// <returns>True if there is a breach of reading, and a work
        /// has been created.</returns>
        /// <param name="point"></param>
        public bool CheckForEvent(OOPCAEEvent opcAeEvent)
        {
            bool breached = false;
            if (opcAeEvent.CreateWorkOnEvent == 1)
            {
                string[] conditionNames = opcAeEvent.ConditionNames.Split(',');
                string[] subconditionNames = opcAeEvent.SubConditionNames.Split(',');

                if (Contains(conditionNames, this.ConditionName) &&
                    Contains(subconditionNames, this.SubConditionName) &&
                    opcAeEvent.SeverityFrom <= this.Severity &&
                    this.Severity <= opcAeEvent.SeverityTo)
                {
                    // Raise an event that can be overriden by 
                    // a customized instance of the Anacle.EAM
                    // application.
                    //
                    opcAeEvent.EventRaised(this);

                    if (opcAeEvent.NumberOfEventsToTriggerAction != null)
                    {
                        // If the number of breaches to trigger action is specified,
                        // we increment the number of breaches so far, and check
                        // if we have hit the limit. If so, automatically generate
                        // a Work object.
                        //
                        if (opcAeEvent.NumberOfEventsSoFar < opcAeEvent.NumberOfEventsToTriggerAction)
                            opcAeEvent.NumberOfEventsSoFar++;

                        if (opcAeEvent.NumberOfEventsSoFar >= opcAeEvent.NumberOfEventsToTriggerAction)
                        {
                            // Okay, we have exceed the limit, so we create a
                            // work when necessary.
                            //
                            opcAeEvent.NumberOfEventsSoFar = 0;
                            if (opcAeEvent.CreateOnlyIfWorksAreCancelledOrClosed == 1)
                            {
                                // Check for the presence of works that are generated
                                // by this point and are NOT cancelled or closed.
                                //
                                TWork tWork = TablesLogic.tWork;
                                int count = tWork.Select(tWork.ObjectID.Count()).Where(
                                    tWork.GeneratedByOPCAEEventID == opcAeEvent.ObjectID &
                                    tWork.CurrentActivity.ObjectName != "Cancelled" &
                                    tWork.CurrentActivity.ObjectName != "Close" &
                                    tWork.IsDeleted == 0);

                                if (count == 0)
                                {
                                    // There are no works that are currently, opened
                                    // so therefore we create a work.
                                    //
                                    CreateWork(opcAeEvent);
                                }
                            }
                            else
                            {
                                // Regardless of whether works exists in the database
                                // or not.
                                CreateWork(opcAeEvent);
                            }
                            breached = true;
                        }
                    }
                    else
                        opcAeEvent.NumberOfEventsSoFar = 0;
                    opcAeEvent.Save();
                }
            }
            return breached;
        }


        /// <summary>
        /// Gets the most recent readings by location and location type
        /// parameter.
        /// </summary>
        /// <param name="location"></param>
        /// <param name="locationTypeParameter"></param>
        /// <param name="numberOfResults"></param>
        /// <returns></returns>
        public static DataTable GetEventHistories(Guid opAeEventId, int numberOfResults)
        {
            TOPCAEEventHistory h = TablesLogic.tOPCAEEventHistory;
            DataTable dt = h.SelectTop(
                numberOfResults,
                h.ObjectID,
                h.Source,
                h.ConditionName,
                h.SubConditionName,
                h.EventCategory,
                h.EventType,
                h.Severity,
                h.Message,
                h.DateOfEvent,
                h.CreateOnEventWork.ObjectNumber.As("CreateOnEventWork.ObjectNumber"),
                h.CreateOnEventWork.CurrentActivity.ObjectName.As("CreateOnEventWork.CurrentActivity.ObjectName"))
                .Where(
                h.OPCAEEventID == opAeEventId &
                h.IsDeleted == 0)
                .OrderBy(
                h.DateOfEvent.Desc);

            while (dt.Rows.Count > numberOfResults)
                dt.Rows.RemoveAt(numberOfResults);
            return dt;
        }
    }


    /// <summary>
    /// Enumerates the list of OPC AE event types.
    /// </summary>
    public class AEEventType
    {
        /// <summary>
        /// A simple event.
        /// </summary>
        public const int Simple = 0;

        /// <summary>
        /// A tracking event.
        /// </summary>
        public const int Tracking = 1;

        /// <summary>
        /// A conditional event.
        /// </summary>
        public const int Condition = 2;
    }
}

